<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL 优化原理</title>
      <link href="2021/05/26/yuque/MySQL%20%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86/"/>
      <url>2021/05/26/yuque/MySQL%20%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>​</p><p>说起 MySQL 的查询优化，相信大家收藏了一堆奇技淫巧：不能使用 SELECT *、不使用 NULL 字段、合理创建索引、为字段选择合适的数据类型… <br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1622009693671-651f7c54-d65a-48c4-a30d-65bb99110463.png#height=400&id=ki5XJ&originHeight=400&originWidth=600&originalType=binary&size=0&status=done&style=none&width=600"><br>你是否真的理解这些优化技巧？是否理解其背后的工作原理？在实际场景下性能真有提升吗？我想未必。因而理解这些优化建议背后的原理就尤为重要，希望本文能让你重新审视这些优化建议，并在实际业务场景下合理的运用。可以关注公众号 Java 后端 回复 666 下载一本 Java 技术栈手册，这本手册包含发布过的 MYSQL 技术博文。<strong>MySQL 逻辑架构</strong>如果能在头脑中构建一幅 MySQL 各组件之间如何协同工作的架构图，有助于深入理解 MySQL 服务器。下图展示了 MySQL 的逻辑架构图。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1622009715398-c2474e6b-a787-4662-96ce-6020eebd2915.png#height=265&id=BGr8v&originHeight=265&originWidth=277&originalType=binary&size=0&status=done&style=none&width=277"><br>MySQL 逻辑架构整体分为三层，最上层为客户端层，并非 MySQL 所独有，诸如：连接处理、授权认证、安全等功能均在这一层处理。MySQL 大多数核心服务均在中间这一层，包括查询解析、分析、优化、缓存、内置函数(比如：时间、数学、加密等函数)。所有的跨存储引擎的功能也在这一层实现：存储过程、触发器、视图等。最下层为存储引擎，其负责 MySQL 中的数据存储和提取。和 Linux 下的文件系统类似，每种存储引擎都有其优势和劣势。中间的服务层通过 API 与存储引擎通信，这些 API 接口屏蔽了不同存储引擎间的差异。</p><h3 id="MySQL-查询过程"><a href="#MySQL-查询过程" class="headerlink" title="MySQL 查询过程"></a><strong>MySQL 查询过程</strong></h3><p>我们总是希望 MySQL 能够获得更高的查询性能，最好的办法是弄清楚 MySQL 是如何优化和执行查询的。一旦理解了这一点，就会发现：很多的查询优化工作实际上就是遵循一些原则让 MySQL 的优化器能够按照预想的合理方式运行而已。当向 MySQL 发送一个请求的时候，MySQL 到底做了些什么呢？<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1622009715494-76f023b7-69b1-492f-a3eb-ed957c9b31ac.webp#height=375&id=aoXKi&originHeight=375&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"></p><h3 id="客户端-服务端通信协议"><a href="#客户端-服务端通信协议" class="headerlink" title="客户端/服务端通信协议"></a><strong>客户端/服务端通信协议</strong></h3><p>MySQL 客户端/服务端通信协议是“半双工”的：在任一时刻，要么是服务器向客户端发送数据，要么是客户端向服务器发送数据，这两个动作不能同时发生。一旦一端开始发送消息，另一端要接收完整个消息才能响应它，所以我们无法也无须将一个消息切成小块独立发送，也没有办法进行流量控制。客户端用一个单独的数据包将查询请求发送给服务器，所以当查询语句很长的时候，需要设置 max_allowed_packet 参数。但是需要注意的是，如果查询实在是太大，服务端会拒绝接收更多数据并抛出异常。与之相反的是，服务器响应给用户的数据通常会很多，由多个数据包组成。但是当服务器响应客户端请求时，客户端必须完整的接收整个返回结果，而不能简单的只取前面几条结果，然后让服务器停止发送。因而在实际开发中，尽量保持查询简单且只返回必需的数据，减小通信间数据包的大小和数量是一个非常好的习惯，这也是查询中尽量避免使用 SELECT *以及加上 LIMIT 限制的原因之一。</p><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a><strong>查询缓存</strong></h3><p>在解析一个查询语句前，如果查询缓存是打开的，那么 MySQL 会检查这个查询语句是否命中查询缓存中的数据。如果当前查询恰好命中查询缓存，在检查一次用户权限后直接返回缓存中的结果。这种情况下，查询不会被解析，也不会生成执行计划，更不会执行。MySQL 将缓存存放在一个引用表（不要理解成 table，可以认为是类似于 HashMap 的数据结构），通过一个哈希值索引，这个哈希值通过查询本身、当前要查询的数据库、客户端协议版本号等一些可能影响结果的信息计算得来。所以两个查询在任何字符上的不同（例如：空格、注释），都会导致缓存不会命中。如果查询中包含任何用户自定义函数、存储函数、用户变量、临时表、MySQL 库中的系统表，其查询结果都不会被缓存。比如函数 NOW()或者 CURRENT_DATE()会因为不同的查询时间，返回不同的查询结果，再比如包含 CURRENT_USER 或者 CONNECION_ID()的查询语句会因为不同的用户而返回不同的结果，将这样的查询结果缓存起来没有任何的意义。既然是缓存，就会失效，那查询缓存何时失效呢？MySQL 的查询缓存系统会跟踪查询中涉及的每个表，如果这些表（数据或结构）发生变化，那么和这张表相关的所有缓存数据都将失效。<br>正因为如此，在任何的写操作时，MySQL 必须将对应表的所有缓存都设置为失效。如果查询缓存非常大或者碎片很多，这个操作就可能带来很大的系统消耗，甚至导致系统僵死一会儿。而且查询缓存对系统的额外消耗也不仅仅在写操作，读操作也不例外：1. 任何的查询语句在开始之前都必须经过检查，即使这条 SQL 语句永远不会命中缓存 2. 如果查询结果可以被缓存，那么执行完成后，会将结果存入缓存，也会带来额外的系统消耗基于此，我们要知道并不是什么情况下查询缓存都会提高系统性能，缓存和失效都会带来额外消耗，只有当缓存带来的资源节约大于其本身消耗的资源时，才会给系统带来性能提升。但要如何评估打开缓存是否能够带来性能提升是一件非常困难的事情，也不在本文讨论的范畴内。如果系统确实存在一些性能问题，可以尝试打开查询缓存，并在数据库设计上做一些优化，比如：1. 用多个小表代替一个大表，注意不要过度设计 2. 批量插入代替循环单条插入 3. 合理控制缓存空间大小，一般来说其大小设置为几十兆比较合适 4. 可以通过 SQL_CACHE 和 SQL_NO_CACHE 来控制某个查询语句是否需要进行缓存最后的忠告是不要轻易打开查询缓存，特别是写密集型应用。如果你实在是忍不住，可以将 query_cache_type 设置为 DEMAND，这时只有加入 SQL_CACHE 的查询才会走缓存，其他查询则不会，这样可以非常自由地控制哪些查询需要被缓存。当然查询缓存系统本身是非常复杂的，这里讨论的也只是很小的一部分，其他更深入的话题，比如：缓存是如何使用内存的？如何控制内存的碎片化？事务对查询缓存有何影响等等，读者可以自行阅读相关资料，这里权当抛砖引玉吧。</p><h3 id="语法解析和预处理"><a href="#语法解析和预处理" class="headerlink" title="语法解析和预处理"></a><strong>语法解析和预处理</strong></h3><p>MySQL 通过关键字将 SQL 语句进行解析，并生成一颗对应的解析树。这个过程解析器主要通过语法规则来验证和解析。比如 SQL 中是否使用了错误的关键字或者关键字的顺序是否正确等等。预处理则会根据 MySQL 规则进一步检查解析树是否合法。比如检查要查询的数据表和数据列是否存在等。</p><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a><strong>查询优化</strong></h3><p>经过前面的步骤生成的语法树被认为是合法的了，并且由优化器将其转化成查询计划。多数情况下，一条查询可以有很多种执行方式，最后都返回相应的结果。优化器的作用就是找到这其中最好的执行计划。MySQL 使用基于成本的优化器，它尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个。在 MySQL 可以通过查询当前会话的 last_query_cost 的值来得到其计算当前查询的成本。<br><strong>mysql&gt;</strong> select * from t_message limit 10;</p><p>…省略结果集 *<strong>*mysql&gt;</strong> show status like ‘last_query_cost’;</p><p>+—————–+————-+</p><p>| Variable_name   | Value       |</p><p>+—————–+————-+</p><p>| Last_query_cost | 6391.799000 |</p><p>+—————–+————-+<br>示例中的结果表示优化器认为大概需要做 6391 个数据页的随机查找才能完成上面的查询。这个结果是根据一些列的统计信息计算得来的，这些统计信息包括：每张表或者索引的页面个数、索引的基数、索引和数据行的长度、索引的分布情况等等。有非常多的原因会导致 MySQL 选择错误的执行计划，比如统计信息不准确、不会考虑不受其控制的操作成本（用户自定义函数、存储过程）、MySQL 认为的最优跟我们想的不一样（我们希望执行时间尽可能短，但 MySQL 值选择它认为成本小的，但成本小并不意味着执行时间短）等等。MySQL 的查询优化器是一个非常复杂的部件，它使用了非常多的优化策略来生成一个最优的执行计划：</p><ul><li>重新定义表的关联顺序（多张表关联查询时，并不一定按照 SQL 中指定的顺序进行，但有一些技巧可以指定关联顺序）</li><li>优化 MIN()和 MAX()函数（找某列的最小值，如果该列有索引，只需要查找 B+Tree 索引最左端，反之则可以找到最大值，具体原理见下文）</li><li>提前终止查询（比如：使用 Limit 时，查找到满足数量的结果集后会立即终止查询）</li><li>优化排序（在老版本 MySQL 会使用两次传输排序，即先读取行指针和需要排序的字段在内存中对其排序，然后再根据排序结果去读取数据行，而新版本采用的是单次传输排序，也就是一次读取所有的数据行，然后根据给定的列排序。对于 I/O 密集型应用，效率会高很多）</li></ul><p>随着 MySQL 的不断发展，优化器使用的优化策略也在不断的进化，这里仅仅介绍几个非常常用且容易理解的优化策略，其他的优化策略，大家自行查阅吧。</p><h3 id="查询执行引擎"><a href="#查询执行引擎" class="headerlink" title="查询执行引擎"></a><strong>查询执行引擎</strong></h3><p>在完成解析和优化阶段以后，MySQL 会生成对应的执行计划，查询执行引擎根据执行计划给出的指令逐步执行得出结果。整个执行过程的大部分操作均是通过调用存储引擎实现的接口来完成，这些接口被称为 handler API。查询过程中的每一张表由一个 handler 实例表示。实际上，MySQL 在查询优化阶段就为每一张表创建了一个 handler 实例，优化器可以根据这些实例的接口来获取表的相关信息，包括表的所有列名、索引统计信息等。存储引擎接口提供了非常丰富的功能，但其底层仅有几十个接口，这些接口像搭积木一样完成了一次查询的大部分操作。</p><h3 id="返回结果给客户端"><a href="#返回结果给客户端" class="headerlink" title="返回结果给客户端"></a><strong>返回结果给客户端</strong></h3><p>查询执行的最后一个阶段就是将结果返回给客户端。即使查询不到数据，MySQL 仍然会返回这个查询的相关信息，比如该查询影响到的行数以及执行时间等。如果查询缓存被打开且这个查询可以被缓存，MySQL 也会将结果存放到缓存中。结果集返回客户端是一个增量且逐步返回的过程。有可能 MySQL 在生成第一条结果时，就开始向客户端逐步返回结果集了。这样服务端就无须存储太多结果而消耗过多内存，也可以让客户端第一时间获得返回结果。需要注意的是，结果集中的每一行都会以一个满足 ① 中所描述的通信协议的数据包发送，再通过 TCP 协议进行传输，在传输过程中，可能对 MySQL 的数据包进行缓存然后批量发送。回头总结一下 MySQL 整个查询执行过程，总的来说分为 6 个步骤：</p><ul><li>客户端向 MySQL 服务器发送一条查询请求</li><li>服务器首先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段</li><li>服务器进行 SQL 解析、预处理、再由优化器生成对应的执行计划</li><li>MySQL 根据执行计划，调用存储引擎的 API 来执行查询</li><li>将结果返回给客户端，同时缓存查询结果</li></ul><h3 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a><strong>性能优化建议</strong></h3><p>看了这么多，你可能会期待给出一些优化手段，是的，下面会从 3 个不同方面给出一些优化建议。但请等等，还有一句忠告要先送给你：<strong>不要听信你看到的关于优化的“绝对真理”</strong>，包括本文所讨论的内容，而应该是在实际的业务场景下通过测试来验证你关于执行计划以及响应时间的假设。<strong>1、Scheme 设计与数据类型优化</strong>选择数据类型只要遵循<strong>小而简单</strong>的原则就好，越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。越简单的数据类型在计算时需要更少的 CPU 周期，比如，整型就比字符操作代价低，因而会使用整型来存储 ip 地址，使用 DATETIME 来存储时间，而不是使用字符串。这里总结几个可能容易理解错误的技巧：1. 通常来说把可为 NULL 的列改为 NOT NULL 不会对性能提升有多少帮助，只是如果计划在列上创建索引，就应该将该列设置为 NOT NULL。2. 对整数类型指定宽度，比如 INT(11)，没有任何卵用。INT 使用 32 位（4 个字节）存储空间，那么它的表示范围已经确定，所以 INT(1)和 INT(20)对于存储和计算是相同的。3. UNSIGNED 表示不允许负值，大致可以使正数的上限提高一倍。比如 TINYINT 存储范围是-128 ~ 127，而 UNSIGNED TINYINT 存储的范围却是 0 - 255。4. 通常来讲，没有太大的必要使用 DECIMAL 数据类型。即使是在需要存储财务数据时，仍然可以使用 BIGINT。比如需要精确到万分之一，那么可以将数据乘以一百万然后使用 BIGINT 存储。这样可以避免浮点数计算不准确和 DECIMAL 精确计算代价高的问题。5. TIMESTAMP 使用 4 个字节存储空间，DATETIME 使用 8 个字节存储空间。因而，TIMESTAMP 只能表示 1970 - 2038 年，比 DATETIME 表示的范围小得多，而且 TIMESTAMP 的值因时区不同而不同。6. 大多数情况下没有使用枚举类型的必要，其中一个缺点是枚举的字符串列表是固定的，添加和删除字符串（枚举选项）必须使用 ALTER TABLE（如果只只是在列表末尾追加元素，不需要重建表）。7. schema 的列不要太多。原因是存储引擎的 API 工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码成各个列，这个转换过程的代价是非常高的。如果列太多而实际使用的列又很少的话，有可能会导致 CPU 占用过高。8. 大表 ALTER TABLE 非常耗时，MySQL 执行大部分修改表结果操作的方法是用新的结构创建一个张空表，从旧表中查出所有的数据插入新表，然后再删除旧表。尤其当内存不足而表又很大，而且还有很大索引的情况下，耗时更久。当然有一些奇技淫巧可以解决这个问题，有兴趣可自行查阅。<strong>2、创建高性能索引</strong>索引是提高 MySQL 查询性能的一个重要途径，但过多的索引可能会导致过高的磁盘使用率以及过高的内存占用，从而影响应用程序的整体性能。应当尽量避免事后才想起添加索引，因为事后可能需要监控大量的 SQL 才能定位到问题所在，而且添加索引的时间肯定是远大于初始添加索引所需要的时间，可见索引的添加也是非常有技术含量的。接下来将向你展示一系列创建高性能索引的策略，以及每条策略其背后的工作原理。但在此之前，先了解与索引相关的一些算法和数据结构，将有助于更好的理解后文的内容。<strong>3、索引相关的数据结构和算法</strong>通常我们所说的索引是指 B-Tree 索引，它是目前关系型数据库中查找数据最为常用和有效的索引，大多数存储引擎都支持这种索引。使用 B-Tree 这个术语，是因为 MySQL 在 CREATE TABLE 或其它语句中使用了这个关键字，但实际上不同的存储引擎可能使用不同的数据结构，比如 InnoDB 就是使用的 B+Tree。B+Tree 中的 B 是指 balance，意为平衡。需要注意的是，B+树索引并不能找到一个给定键值的具体行，它找到的只是被查找数据行所在的页，接着数据库会把页读入到内存，再在内存中进行查找，最后得到要查找的数据。在介绍 B+Tree 前，先了解一下二叉查找树，它是一种经典的数据结构，其左子树的值总是小于根的值，右子树的值总是大于根的值，如下图 ①。如果要在这课树中查找值为 5 的记录，其大致流程：先找到根，其值为 6，大于 5，所以查找左子树，找到 3，而 5 大于 3，接着找 3 的右子树，总共找了 3 次。同样的方法，如果查找值为 8 的记录，也需要查找 3 次。所以二叉查找树的平均查找次数为(3 + 3 + 3 + 2 + 2 + 1) / 6 = 2.3 次，而顺序查找的话，查找值为 2 的记录，仅需要 1 次，但查找值为 8 的记录则需要 6 次，所以顺序查找的平均查找次数为：(1 + 2 + 3 + 4 + 5 + 6) / 6 = 3.3 次，因此大多数情况下二叉查找树的平均查找速度比顺序查找要快。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1622009715354-d248d619-5fed-4f61-9a88-0ab0e0b37211.png#height=232&id=dnfNv&originHeight=232&originWidth=618&originalType=binary&size=0&status=done&style=none&width=618"><br>由于二叉查找树可以任意构造，同样的值，可以构造出如图 ② 的二叉查找树，显然这棵二叉树的查询效率和顺序查找差不多。若想二叉查找数的查询性能最高，需要这棵二叉查找树是平衡的，也即平衡二叉树（AVL 树）。平衡二叉树首先需要符合二叉查找树的定义，其次必须满足任何节点的两个子树的高度差不能大于 1。显然图 ② 不满足平衡二叉树的定义，而图 ① 是一课平衡二叉树。平衡二叉树的查找性能是比较高的（性能最好的是最优二叉树），查询性能越好，维护的成本就越大。比如图 ① 的平衡二叉树，当用户需要插入一个新的值 9 的节点时，就需要做出如下变动。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1622009715425-1086fc82-9251-4324-accb-3229348fde4e.png#height=225&id=n1YZd&originHeight=225&originWidth=538&originalType=binary&size=0&status=done&style=none&width=538"><br>通过一次左旋操作就将插入后的树重新变为平衡二叉树是最简单的情况了，实际应用场景中可能需要旋转多次。至此我们可以考虑一个问题，平衡二叉树的查找效率还不错，实现也非常简单，相应的维护成本还能接受，为什么 MySQL 索引不直接使用平衡二叉树？随着数据库中数据的增加，索引本身大小随之增加，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘 I/O 消耗，相对于内存存取，I/O 存取的消耗要高几个数量级。可以想象一下一棵几百万节点的二叉树的深度是多少？如果将这么大深度的一颗二叉树放磁盘上，每读取一个节点，需要一次磁盘的 I/O 读取，整个查找的耗时显然是不能够接受的。那么如何减少查找过程中的 I/O 存取次数？一种行之有效的解决方法是减少树的深度，将二叉树变为 m 叉树（多路搜索树），而 B+Tree 就是一种多路搜索树。理解 B+Tree 时，只需要理解其最重要的两个特征即可：第一，所有的关键字（可以理解为数据）都存储在叶子节点（Leaf Page），非叶子节点（Index Page）并不存储真正的数据，所有记录节点都是按键值大小顺序存放在同一层叶子节点上。其次，所有的叶子节点由指针连接。如下图为高度为 2 的简化了的 B+Tree。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1622009715524-93c611f8-4b35-489a-ad8d-012d4fd7c1b6.png#height=163&id=XIUa2&originHeight=163&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>怎么理解这两个特征？MySQL 将每个节点的大小设置为一个页的整数倍（原因下文会介绍），也就是在节点空间大小一定的情况下，每个节点可以存储更多的内结点，这样每个结点能索引的范围更大更精确。所有的叶子节点使用指针链接的好处是可以进行区间访问，比如上图中，如果查找大于 20 而小于 30 的记录，只需要找到节点 20，就可以遍历指针依次找到 25、30。如果没有链接指针的话，就无法进行区间查找。这也是 MySQL 使用 B+Tree 作为索引存储结构的重要原因。MySQL 为何将节点大小设置为页的整数倍，这就需要理解磁盘的存储原理。磁盘本身存取就比主存慢很多，在加上机械运动损耗（特别是普通的机械硬盘），磁盘的存取速度往往是主存的几百万分之一，为了尽量减少磁盘 I/O，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，预读的长度一般为页的整数倍。页是计算机管理存储器的逻辑块，硬件及 OS 往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（许多 OS 中，页的大小通常为 4K）。主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后一起返回，程序继续运行。MySQL 巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入。为了达到这个目的，每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了读取一个节点只需一次 I/O。假设 B+Tree 的高度为 h，一次检索最多需要 h-1I/O（根节点常驻内存），复杂度 O(h)=O(logMN)。实际应用场景中，M 通常较大，常常超过 100，因此树的高度一般都比较小，通常不超过 3。最后简单了解下 B+Tree 节点的操作，在整体上对索引的维护有一个大概的了解，虽然索引可以大大提高查询效率，但维护索引仍要花费很大的代价，因此合理的创建索引也就尤为重要。仍以上面的树为例，我们假设每个节点只能存储 4 个内节点。首先要插入第一个节点 28，如下图所示。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1622009715434-8ae05bb9-a189-41ef-8fe6-e5b4cb4dd866.webp#height=174&id=EzChO&originHeight=174&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>接着插入下一个节点 70，在 Index Page 中查询后得知应该插入到 50 - 70 之间的叶子节点，但叶子节点已满，这时候就需要进行也分裂的操作，当前的叶子节点起点为 50，所以根据中间值来拆分叶子节点，如下图所示。<br>​</p><p>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1622009715522-1f05b5ac-3e42-401f-a9fe-a41a90b70546.webp#height=376&id=eBu2Z&originHeight=376&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>最后插入一个节点 95，这时候 Index Page 和 Leaf Page 都满了，就需要做两次拆分，如下图所示。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1622009715500-3c635d09-3f59-486d-b83c-bd2ee447a292.webp#height=406&id=VYORN&originHeight=406&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>拆分后最终形成了这样一颗树。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1622009715380-85041679-4ab3-457e-9135-c41dc3c2eba7.webp#height=148&id=VvGfY&originHeight=148&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>B+Tree 为了保持平衡，对于新插入的值需要做大量的拆分页操作，而页的拆分需要 I/O 操作，为了尽可能的减少页的拆分操作，B+Tree 也提供了类似于平衡二叉树的旋转功能。当 Leaf Page 已满但其左右兄弟节点没有满的情况下，B+Tree 并不急于去做拆分操作，而是将记录移到当前所在页的兄弟节点上。通常情况下，左兄弟会被先检查用来做旋转操作。就比如上面第二个示例，当插入 70 的时候，并不会去做页拆分，而是左旋操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1622009715442-88ee019c-2fc9-4cb2-900e-b45d2a2cebe6.png#height=451&id=GOIR9&originHeight=451&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>通过旋转操作可以最大限度的减少页分裂，从而减少索引维护过程中的磁盘的 I/O 操作，也提高索引维护效率。需要注意的是，删除节点跟插入节点类似，仍然需要旋转和拆分操作，这里就不再说明。</p><h3 id="高性能策略"><a href="#高性能策略" class="headerlink" title="高性能策略"></a><strong>高性能策略</strong></h3><p>通过上文，相信你对 B+Tree 的数据结构已经有了大致的了解，但 MySQL 中索引是如何组织数据的存储呢？以一个简单的示例来说明，假如有如下数据表：</p><pre class="language-none"><code class="language-none">CREATE TABLE People(    last_name varchar(50) not null,    first_name varchar(50) not null,    dob date not null,    gender enum(&#96;m&#96;,&#96;f&#96;) not null,    key(last_name,first_name,dob));</code></pre><p>对于表中每一行数据，索引中包含了 last_name、first_name、dob 列的值，下图展示了索引是如何组织数据存储的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1622009715653-065a953c-128e-4367-96cd-1b9526c227a6.webp#height=127&id=CMZ6S&originHeight=127&originWidth=640&originalType=binary&size=0&status=done&style=none&width=640"><br>可以看到，索引首先根据第一个字段来排列顺序，当名字相同时，则根据第三个字段，即出生日期来排序，正是因为这个原因，才有了索引的“最左原则”。<strong>1、MySQL 不会使用索引的情况：非独立的列</strong>“独立的列”是指索引列不能是表达式的一部分，也不能是函数的参数。比如：</p><pre class="language-none"><code class="language-none">select * from where id + 1 &#x3D; 5</code></pre><p>我们很容易看出其等价于 id = 4，但是 MySQL 无法自动解析这个表达式，使用函数是同样的道理。<strong>2、前缀索引</strong>如果列很长，通常可以索引开始的部分字符，这样可以有效节约索引空间，从而提高索引效率。<strong>3、多列索引和索引顺序</strong>在多数情况下，在多个列上建立独立的索引并不能提高查询性能。理由非常简单，MySQL 不知道选择哪个索引的查询效率更好，所以在老版本，比如 MySQL5.0 之前就会随便选择一个列的索引，而新的版本会采用合并索引的策略。举个简单的例子，在一张电影演员表中，在 actor_id 和 film_id 两个列上都建立了独立的索引，然后有如下查询：</p><pre class="language-none"><code class="language-none">select film_id,actor_id from film_actor where actor_id &#x3D; 1 or film_id &#x3D; 1</code></pre><p>老版本的 MySQL 会随机选择一个索引，但新版本做如下的优化：</p><pre class="language-none"><code class="language-none">select film_id,actor_id from film_actor where actor_id &#x3D; 1union allselect film_id,actor_id from film_actor where film_id &#x3D; 1 and actor_id &lt;&gt; 1</code></pre><ul><li>当出现多个索引做相交操作时（多个 AND 条件），通常来说一个包含所有相关列的索引要优于多个独立索引。</li><li>当出现多个索引做联合操作时（多个 OR 条件），对结果集的合并、排序等操作需要耗费大量的 CPU 和内存资源，特别是当其中的某些索引的选择性不高，需要返回合并大量数据时，查询成本更高。所以这种情况下还不如走全表扫描。</li></ul><p>因此 explain 时如果发现有索引合并（Extra 字段出现 Using union），应该好好检查一下查询和表结构是不是已经是最优的，如果查询和表都没有问题，那只能说明索引建的非常糟糕，应当慎重考虑索引是否合适，有可能一个包含所有相关列的多列索引更适合。前面我们提到过索引如何组织数据存储的，从图中可以看到多列索引时，索引的顺序对于查询是至关重要的，很明显应该把选择性更高的字段放到索引的前面，这样通过第一个字段就可以过滤掉大多数不符合条件的数据。索引选择性是指不重复的索引值和数据表的总记录数的比值，选择性越高查询效率越高，因为选择性越高的索引可以让 MySQL 在查询时过滤掉更多的行。唯一索引的选择性是 1，这时最好的索引选择性，性能也是最好的。理解索引选择性的概念后，就不难确定哪个字段的选择性较高了，查一下就知道了，比如：</p><pre class="language-none"><code class="language-none">SELECT * FROM payment where staff_id &#x3D; 2 and customer_id &#x3D; 584</code></pre><p>是应该创建(staff_id,customer_id)的索引还是应该颠倒一下顺序？执行下面的查询，哪个字段的选择性更接近 1 就把哪个字段索引前面就好。</p><pre class="language-none"><code class="language-none">select count(distinct staff_id)&#x2F;count(*) as staff_id_selectivity,       count(distinct customer_id)&#x2F;count(*) as customer_id_selectivity,       count(*) from payment</code></pre><p>多数情况下使用这个原则没有任何问题，但仍然注意你的数据中是否存在一些特殊情况。举个简单的例子，比如要查询某个用户组下有过交易的用户信息：</p><pre class="language-none"><code class="language-none">select user_id from trade where user_group_id &#x3D; 1 and trade_amount &gt; 0</code></pre><p>MySQL 为这个查询选择了索引(user_group_id,trade_amount)，如果不考虑特殊情况，这看起来没有任何问题，但实际情况是这张表的大多数数据都是从老系统中迁移过来的，由于新老系统的数据不兼容，所以就给老系统迁移过来的数据赋予了一个默认的用户组。这种情况下，通过索引扫描的行数跟全表扫描基本没什么区别，索引也就起不到任何作用。推广开来说，经验法则和推论在多数情况下是有用的，可以指导我们开发和设计，但实际情况往往会更复杂，实际业务场景下的某些特殊情况可能会摧毁你的整个设计。<strong>4、避免多个范围条件</strong>实际开发中，我们会经常使用多个范围条件，比如想查询某个时间段内登录过的用户：</p><pre class="language-none"><code class="language-none">select user.* from user where login_time &gt; &#39;2017-04-01&#39; and age between 18 and 30;</code></pre><p>这个查询有一个问题：它有两个范围条件，login_time 列和 age 列，MySQL 可以使用 login_time 列的索引或者 age 列的索引，但无法同时使用它们。<strong>5、覆盖索引</strong>如果一个索引包含或者说覆盖所有需要查询的字段的值，那么就没有必要再回表查询，这就称为覆盖索引。覆盖索引是非常有用的工具，可以极大的提高性能，因为查询只需要扫描索引会带来许多好处：</p><ul><li>索引条目远小于数据行大小，如果只读取索引，极大减少数据访问量</li><li>索引是有按照列值顺序存储的，对于 I/O 密集型的范围查询要比随机从磁盘读取每一行数据的 IO 要少的多</li></ul><p><strong>6、使用索引扫描来排序</strong>MySQL 有两种方式可以生产有序的结果集，其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的。如果 explain 的结果中 type 列的值为 index 表示使用了索引扫描来做排序。扫描索引本身很快，因为只需要从一条索引记录移动到相邻的下一条记录。但如果索引本身不能覆盖所有需要查询的列，那么就不得不每扫描一条索引记录就回表查询一次对应的行。这个读取操作基本上是随机 I/O，因此按照索引顺序读取数据的速度通常要比顺序地全表扫描要慢。在设计索引时，如果一个索引既能够满足排序，又满足查询，是最好的。只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向也一样时，才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有 ORDER BY 子句引用的字段全部为第一张表时，才能使用索引做排序。ORDER BY 子句和查询的限制是一样的，都要满足最左前缀的要求（有一种情况例外，就是最左的列被指定为常数，下面是一个简单的示例），其它情况下都需要执行排序操作，而无法利用索引排序。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 最左列为常数，索引：(date,staff_id,customer_id)select  staff_id,customer_id from demo where date &#x3D; &#39;2015-06-01&#39; order by staff_id,customer_id</code></pre><p><strong>7、冗余和重复索引</strong>冗余索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应当尽量避免这种索引，发现后立即删除。比如有一个索引(A,B)，再创建索引(A)就是冗余索引。冗余索引经常发生在为表添加新索引时，比如有人新建了索引(A,B)，但这个索引不是扩展已有的索引(A)。大多数情况下都应该尽量扩展已有的索引而不是创建新索引。但有极少情况下出现性能方面的考虑需要冗余索引，比如扩展已有索引而导致其变得过大，从而影响到其他使用该索引的查询。<strong>8、删除长期未使用的索引</strong>定期删除一些长时间未使用过的索引是一个非常好的习惯。关于索引这个话题打算就此打住，最后要说一句，索引并不总是最好的工具，只有当索引帮助提高查询速度带来的好处大于其带来的额外工作时，索引才是有效的。对于非常小的表，简单的全表扫描更高效。对于中到大型的表，索引就非常有效。对于超大型的表，建立和维护索引的代价随之增长，这时候其他技术也许更有效，比如分区表。最后的最后，explain 后再提测是一种美德。</p><h3 id="特定类型查询优化"><a href="#特定类型查询优化" class="headerlink" title="特定类型查询优化"></a><strong>特定类型查询优化</strong></h3><p><strong>优化 COUNT()查询</strong>COUNT()可能是被大家误解最多的函数了，它有两种不同的作用，其一是统计某个列值的数量，其二是统计行数。统计列值时，要求列值是非空的，它不会统计 NULL。如果确认括号中的表达式不可能为空时，实际上就是在统计行数。最简单的就是当使用 COUNT(<em>)时，并不是我们所想象的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计所有的行数。我们最常见的误解也就在这儿，在括号内指定了一列却希望统计结果是行数，而且还常常误以为前者的性能会更好。但实际并非这样，如果要统计行数，直接使用 COUNT(</em>)，意义清晰，且性能更好。有时候某些业务场景并不需要完全精确的 COUNT 值，可以用近似值来代替，EXPLAIN 出来的行数就是一个不错的近似值，而且执行 EXPLAIN 并不需要真正地去执行查询，所以成本非常低。通常来说，执行 COUNT()都需要扫描大量的行才能获取到精确的数据，因此很难优化，MySQL 层面还能做得也就只有覆盖索引了。如果不还能解决问题，只有从架构层面解决了，比如添加汇总表，或者使用 redis 这样的外部缓存系统。<strong>优化关联查询</strong>在大数据场景下，表与表之间通过一个冗余字段来关联，要比直接使用 JOIN 有更好的性能。如果确实需要使用关联查询的情况下，需要特别注意的是：1. 确保 ON 和 USING 字句中的列上有索引。在创建索引的时候就要考虑到关联的顺序。当表 A 和表 B 用列 c 关联的时候，如果优化器关联的顺序是 A、B，那么就不需要在 A 表的对应列上创建索引。没有用到的索引会带来额外的负担，一般来说，除非有其他理由，只需要在关联顺序中的第二张表的相应列上创建索引（具体原因下文分析）。2. 确保任何的 GROUP BY 和 ORDER BY 中的表达式只涉及到一个表中的列，这样 MySQL 才有可能使用索引来优化。要理解优化关联查询的第一个技巧，就需要理解 MySQL 是如何执行关联查询的。当前 MySQL 关联执行的策略非常简单，它对任何的关联都执行<strong>嵌套循环关联操作</strong>，即先在一个表中循环取出单条数据，然后在嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为为止。然后根据各个表匹配的行，返回查询中需要的各个列。太抽象了？以上面的示例来说明，比如有这样的一个查询：</p><pre class="language-none"><code class="language-none">SELECT A.xx,B.yyFROM A INNER JOIN B USING(c)WHERE A.xx IN (5,6)</code></pre><p>假设 MySQL 按照查询中的关联顺序 A、B 来进行关联操作，那么可以用下面的伪代码表示 MySQL 如何完成这个查询：</p><pre class="language-none"><code class="language-none">outer_iterator &#x3D; SELECT A.xx,A.c FROM A WHERE A.xx IN (5,6);outer_row &#x3D; outer_iterator.next;while(outer_row) &#123;    inner_iterator &#x3D; SELECT B.yy FROM B WHERE B.c &#x3D; outer_row.c;    inner_row &#x3D; inner_iterator.next;    while(inner_row) &#123;        output[inner_row.yy,outer_row.xx];        inner_row &#x3D; inner_iterator.next;    &#125;    outer_row &#x3D; outer_iterator.next;&#125;</code></pre><p>可以看到，最外层的查询是根据 A.xx 列来查询的，A.c 上如果有索引的话，整个关联查询也不会使用。再看内层的查询，很明显 B.c 上如果有索引的话，能够加速查询，因此只需要在关联顺序中的第二张表的相应列上创建索引即可。<strong>优化 LIMIT 分页</strong>当需要分页操作时，通常会使用 LIMIT 加上偏移量的办法实现，同时加上合适的 ORDER BY 字句。如果有对应的索引，通常效率会不错，否则，MySQL 需要做大量的文件排序操作。一个常见的问题是当偏移量非常大的时候，比如：LIMIT 10000 20 这样的查询，MySQL 需要查询 10020 条记录然后只返回 20 条记录，前面的 10000 条都将被抛弃，这样的代价非常高。优化这种查询一个最简单的办法就是尽可能的使用覆盖索引扫描，而不是查询所有的列。然后根据需要做一次关联查询再返回所有的列。对于偏移量很大时，这样做的效率会提升非常大。考虑下面的查询：</p><pre class="language-none"><code class="language-none">SELECT film_id,description FROM film ORDER BY title LIMIT 50,5;</code></pre><p>如果这张表非常大，那么这个查询最好改成下面的样子：</p><pre class="language-none"><code class="language-none">SELECT film.film_id,film.descriptionFROM film INNER JOIN (    SELECT film_id FROM film ORDER BY title LIMIT 50,5) AS tmp USING(film_id);</code></pre><p>这里的延迟关联将大大提升查询效率，让 MySQL 扫描尽可能少的页面，获取需要访问的记录后在根据关联列回原表查询所需要的列。有时候如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用 OFFSET，比如下面的查询：</p><pre class="language-none"><code class="language-none">SELECT id FROM t LIMIT 10000, 10;</code></pre><p>改为：</p><pre class="language-none"><code class="language-none">SELECT id FROM t WHERE id &gt; 10000 LIMIT 10;</code></pre><p>其它优化的办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表中只包含主键列和需要做排序的列。<strong>优化 UNION</strong>MySQL 处理 UNION 的策略是先创建临时表，然后再把各个查询结果插入到临时表中，最后再来做查询。因此很多优化策略在 UNION 查询中都没有办法很好的时候。经常需要手动将 WHERE、LIMIT、ORDER BY 等字句“下推”到各个子查询中，以便优化器可以充分利用这些条件先优化。除非确实需要服务器去重，否则就一定要使用 UNION ALL，如果没有 ALL 关键字，MySQL 会给临时表加上 DISTINCT 选项，这会导致整个临时表的数据做唯一性检查，这样做的代价非常高。当然即使使用 ALL 关键字，MySQL 总是将结果放入临时表，然后再读出，再返回给客户端。虽然很多时候没有这个必要，比如有时候可以直接把每个子查询的结果返回给客户端。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h3><p>理解查询是如何执行以及时间都消耗在哪些地方，再加上一些优化过程的知识，可以帮助大家更好的理解 MySQL，理解常见优化技巧背后的原理。希望本文中的原理、示例能够帮助大家更好的将理论和实践联系起来，更多的将理论知识运用到实践中。其他也没啥说的了，给大家留两个思考题吧，可以在脑袋里想想答案，这也是大家经常挂在嘴边的，但很少有人会思考为什么？1. 有非常多的程序员在分享时都会抛出这样一个观点：尽可能不要使用存储过程，存储过程非常不容易维护，也会增加使用成本，应该把业务逻辑放到客户端。既然客户端都能干这些事，那为什么还要存储过程？2. JOIN 本身也挺方便的，直接查询就好了，为什么还需要视图呢？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="2021/05/25/yuque/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/05/25/yuque/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">概要</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">分布式事务</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">分布式事务方案</a><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">2PC/3PC</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">本地消息表</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">事务消息</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">TCC</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">Saga</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">Seata</a></li></ul></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">分布式事务一致性与 Paxos 一致性的思考</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&scene=21&token=899450012%E2%9F%A8=zh_CN#wechat_redirect">总结</a></li></ul><p>在微服务架构盛行的情况下，在分布式的多个服务中保证业务的一致性，即分布式事务就显得尤为重要。本文将讲述分布式事务及其解决方案，有 XA 协议、TCC 和 Saga 事务模型、本地消息表、事务消息和阿里开源的 Seata。</p><h1 id><a href="#" class="headerlink" title="["></a>[</h1><p>概要](<a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&amp;idx=1&amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==∣=2247487551&amp;idx=1&amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;scene=21#wechat_redirect</a>)<br>在微服务架构盛行的情况下，在分布式的多个服务中保证业务的一致性，即分布式事务就显得尤为重要。本文将讲述分布式事务及其解决方案，有 XA 协议、TCC 和 Saga 事务模型、本地消息表、事务消息和阿里开源的 Seata。</p><h1 id="-1"><a href="#-1" class="headerlink" title="["></a>[</h1><p>分布式事务](<a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&amp;idx=1&amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==∣=2247487551&amp;idx=1&amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;scene=21#wechat_redirect</a>)<br>聊什么是分布式事务前，先聊一下我们熟悉的单机事务。所谓单机事务是相对分布式事务来说的，即数据库事务。大家都知道数据库事务有 ACID 这四个特性：</p><ul><li>A（Atomicity）：指单个事务中的操作要不都执行，要不都不执行</li><li>C（Consistency）：指事务前后数据的完整性必须保持一致</li><li>I（Isolation）：指多个事务对数据可见性的规则</li><li>D（Durability）：指事务提交后，就会被永久存储下来</li></ul><p>既然数据库事务有这四个特性的，那么分布式事务也不例外，应该具备这四个特性。<br>在微服务架构下，服务之间通过 RPC 远程调用，相对单机事务来说，多了“网络通信”这一不确定因素，使得本来服务的调用只有“成功”和“失败”这两种返回结果，变为“成功”、“失败”和“未知”三种返回结果。系统之间的通信可靠性从单一系统中的可靠变成了微服务架构之间的不可靠，分布式事务其实就是在不可靠的通信下实现事务的特性。一般因为网络导致的异常可能有机器宕机、网络异常、消息丢失、消息乱序、数据错误、不可靠的 TCP、存储数据丢失、其他异常等等。</p><h1 id="-2"><a href="#-2" class="headerlink" title></a></h1><h1 id="分布式事务方案"><a href="#分布式事务方案" class="headerlink" title="分布式事务方案"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">分布式事务方案</a></h1><h2 id="2PC-3PC"><a href="#2PC-3PC" class="headerlink" title="2PC/3PC"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">2PC/3PC</a></h2><p>2PC 即二阶段提交 :</p><blockquote><p>二阶段提交（英语：Two-phase Commit）是指在计算机网络以及数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务提交时保持一致性而设计的一种算法。通常，二阶段提交也被称为是一种协议（Protocol）。</p></blockquote><p>2PC 是一种协议，它的作用保证在分布式系统中每个节点要不都提交事务，要么都取消事务。这个跟 ACID 中的 A 原子性的定义很像。<br>2PC 引入一个第三方的节点协调者，即 Coordinator，其他参与事务的节点为参与者，即 Participants。协调者统筹整个事务行为，负责通知参与者进行 Commit 还是 Rollback 操作。<br>2PC 的过程比较简单，分为两个阶段：</p><ol><li><p>准备阶段<br>协调者分别给每个参与者发送 Prepare 消息，每个参与者收到消息后，进行“预提交”操作（不是实际的提交操作），把操作的结果（成功或失败）返回给协调者。</p></li><li><p>提交阶段<br>协调者根据准备阶段收到的参与者的返回结果进行判断，如果所有的参与者都返回成功，那么分别给每个参与者发送 Commit 消息，否则发送 Rollback 消息。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1621910935223-c50eb2b1-6526-4e2a-adb0-a4a09843da15.webp#align=left&display=inline&height=331&margin=%5Bobject%20Object%5D&originHeight=331&originWidth=1080&size=0&status=done&style=none&width=1080"><br>2PC 是一个强一致性协议，同时它在实际应用中还存在几个问题</p><ul><li>同步阻塞，2PC 的两个阶段中，协调者和参与者的通信都是同步的，这会导致整个事务的长时间阻塞</li><li>Coordinator 的单点问题</li><li>数据不一致，在 Commit 阶段，可能存在只有部分参与者收到 Commit 消息（或处理成功）的情况</li></ul><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">3PC</a></h3><p>3PC 即三阶段提交，它比 2PC 多了一个阶段，即把原来 2PC 的准备阶段拆分成 CanCommit 和 PreCommit 两个阶段，同时<br>引入超时机制来解决 2PC 的同步阻塞问题。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1621910984830-93e8802c-cf84-48bb-b6e3-db385be17eed.webp#align=left&display=inline&height=546&margin=%5Bobject%20Object%5D&originHeight=546&originWidth=1080&size=0&status=done&style=none&width=1080"></p><p>但是在我看来 3PC 并没有解决 2PC 的根本问题，它只是在 2PC 的基础上做了一些优化，它增加了一个阶段（也增加了 1 个 RTT）来提高对方可用性的概率，这本质跟 TCP 的三次握手一样，同样也改为四次握手，五次握手等等。</p><h3 id="XA"><a href="#XA" class="headerlink" title="XA"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">XA</a></h3><p>XA 是一种基于 2PC 协议实现的规范。在 2PC 中没有明确资源是什么，以及资源是怎么提交的等等，而 XA 就是数据库实现 2PC 的规范，已知常用的支持 XA 的关系型数据库有 Mysql、Oracle 等。</p><h2 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">本地消息表</a></h2><p>本地消息表方案应该是业界内使用最为广泛的，因为它使用简单，成本比较低。<br>本地消息表的方案最初是由 eBay 提出（完整方案），核心思路是将分布式事务拆分成本地事务进行处理。<br>它的处理流程如下：</p><ul><li>事务发起方把要处理的业务事务和写消息表这两个操作放在同一个本地事务里</li><li>事务发起方有一个定时任务轮询消息表，把没处理的消息发送到消息中间件</li><li>事务被动方从消息中间件获取消息后，返回成功</li><li>事务发起方更新消息状态为已成功</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1621911001393-d7dc8369-50c8-4e6d-b373-9486578d60e0.webp#align=left&display=inline&height=495&margin=%5Bobject%20Object%5D&originHeight=495&originWidth=1080&size=0&status=done&style=none&width=1080"></p><p>从处理流程来看，本地消息表方案是一个基于消息中间件的可靠性来达到事务的最终一致性的方案。<br>一些分析：</p><ul><li><p>把业务处理和写消息表放在同一个事务是为了失败/异常后可以同时回滚</p></li><li><p>为什么不直接发消息，而是先写消息表？<br>试想，如果发送消息超时了，即不确定消息中间件收到消息没，那么你是重试还是抛异常回滚事务呢？回滚是不行的，因为可能消息中间件已经收到消息，接收方收到消息后做处理，导致双方数据不一致了；重试也是不行的，因为有可能会一直重试失败，导致事务阻塞。</p></li><li><p>基于上述分析，消息的接收方是需要做幂等操作的</p></li></ul><p>本地消息表方案整体来说还是比较简单、可用的，但是也有以下缺点：</p><ul><li>消息数据和业务数据耦合，消息表需要根据具体的业务场景制定，不能公用。就算可以公用消息表，对于分库的业务来说每个库都是需要消息表的。</li><li>只适用于最终一致的业务场景。例如在 A -&gt; B 场景下，在不考虑网络异常、宕机等非业务异常的情况下，A 成功的话，B 肯定也会成功的。</li></ul><h2 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">事务消息</a></h2><p>事务消息是通过消息中间件来解耦本地消息表和业务数据表，适用于所有对数据最终一致性需求的场景。现在支持事务消息的消息中间件只有 RocketMQ，这个概念最早也是 RocketMQ 提出的。<br>通过事务消息实现分布式事务的流程如下：</p><ol><li>发起方发送半事务消息会给 RocketMQ ，此时消息的状态 prepare，接受方还不能拉取到此消息</li><li>发起方进行本地事务操作</li><li>发起方给 RocketMQ 确认提交消息，此时接受方可以消费到此消息了</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1621911026953-42f5ba40-db3c-4c2b-9d30-0dbc1a2579f9.webp#align=left&display=inline&height=373&margin=%5Bobject%20Object%5D&originHeight=373&originWidth=1080&size=0&status=done&style=none&width=1080"><br>步骤 1 和 3 失败/异常该如何处理：<br>RocketMQ 会定期扫描还没确认的消息，回调给发送方，询问此次事务的状态，根据发送方的返回结果把这条消息进行取消还是提交确认。<br>可以看出事务消息的本质的借鉴了二阶段提交的思想，它跟本地消息表的做法也很像，事务消息做的事情其实就是把消息表的存储和扫描消息表这两个事情放到消息中间件来做，使得消息表和业务表解耦。</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">TCC</a></h2><p>TCC （Try-Confirm-Cancel）事务模型采用的是补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿操作。<br>相当于 XA 来说，TCC 可以不依赖于资源管理器，即数据库，它是通过业务逻辑来控制确认和补偿操作的，所以它用了’Cancel’而非’Rollback’的字眼。它是一个应用层面的 2PC。<br>TCC 分为三个阶段：</p><ul><li>Try 阶段，对业务资源进行检测和预留</li><li>Confirm 阶段，对 Try 阶段预留的资源进行确认提交，Try 阶段执行成功是 Confirm 阶段执行成功的前提</li><li>Cancel 阶段，对 Try 阶段预留的资源进行撤销或释放</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1621911047716-357631cd-5bce-465a-8cec-34a4743847a1.webp#align=left&display=inline&height=498&margin=%5Bobject%20Object%5D&originHeight=498&originWidth=1080&size=0&status=done&style=none&width=1080"><br>看上去 TCC 跟 2PC/3PC 可能有点像，但是 TCC 强调的是补偿，而且对于对资源的“预留”，“确认”，“释放”，TCC 并没有明确说要如何做，这个具体是要业务来定义的。<br>例如在转账的场景，“预留”操作可能就是对账号里的部分资金进行冻结，这样这个资金只能是当前事务才能用，别的事务用不了。<br>另外，对于异常的场景，TCC 也没有说要怎么做，因为 Try、Confirm、Cancel 都是业务定义的，这三个阶段中发生了异常，那么就由业务来做相应的处理。一般都有以下几种处理：</p><ul><li>如果 Try 成功了，那么 Confirm 阶段异常了就一直重试，直到成功</li><li>Try、Confirm、Cancel 三个阶段都有相应的资源及事务日志，应用根据日志（异步）来做重试或补偿</li><li>TCC 的实现依赖底层数据库，异常后直接利用数据库的事务机制回滚</li></ul><p>其中现在使用比较多的 TCC 框架 ByteTCC、tcc-transaction 的原理都是基于第三点<br>同时，在实现 TCC 时要注意以下三个问题</p><ul><li><p>允许空回滚<br>在 Try 没有真正执行的情况下，触发了 Cancel 操作，这时要允许 Cancel 成功</p></li><li><p>防悬挂控制<br>Cancel 操作比 Try 操作先执行（网络延迟原因），后面的 Try 操作不能执行成功</p></li><li><p>幂等控制</p></li></ul><p>TCC 其实是把控制事务的逻辑放在业务应用层面，而非资源管理器，这样实现起来就会相对灵活很多，但相对对数据一致性的保证可能没那么强（具体看怎么实现 Try），整体来说 TCC 还有以下缺点：</p><ul><li>对于 Confirm 和 Cancel 阶段失败后要完全靠业务应用自己去处理</li><li>每个业务都需要实现 Try、Confirm、Cancel 三个接口，代码量比较多</li><li>如果是基于现有的业务想使用 TCC 会比较困难。一是对于原来的接口要拆分为三个接口，入侵性比较大；二是因为要做“预留”资源的操作，有可能需要对原来的业务模型进行改造。</li></ul><h2 id="Saga"><a href="#Saga" class="headerlink" title="Saga"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Saga</a></h2><p>Saga 事务模型又叫做长时间运行的事务（Long-running-transaction）, 它是由普林斯顿大学的 H.Garcia-Molina 等人提出，它描述的是另外一种在没有两阶段提交的的情况下解决分布式系统中复杂的业务事务问题。Saga 的论文。<br>该模型其核心思想就是拆分分布式系统中的长事务为多个短事务，或者叫多个本地事务，然后由 Saga 工作流引擎负责协调，如果整个流程正常结束，那么就算是业务成功完成，如果在这过程中实现失败，那么 Saga 工作流引擎就会以相反的顺序调用补偿操作，重新进行业务回滚。<br>Saga 也是一种补偿协议，在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/131683/1621911068617-a9c4d7bd-07ee-40b7-8bdc-da3eac2c7f73.webp#align=left&display=inline&height=910&margin=%5Bobject%20Object%5D&originHeight=910&originWidth=886&size=0&status=done&style=none&width=886"><br>你可以看到 Saga 跟 TCC 很像，但是 Saga 更加宽松，一致性更弱，在 Saga 看来，在一阶段直接做提交/确认操作就好了，有问题再做补偿。这样的话，Saga 可以拥有比 XA 和 TCC 更好的性能（XA、TCC 需要锁定资源或预留资源），而且 Saga 强调通过事件驱动异步处理，实现高吞吐。<br>可以看出 Saga 是对 TCC 的一种“妥协”，从 TCC 的三个接口变为两个接口，一阶段直接提交缺少对资源的隔离（如果一阶段提交后，后面发现需要做补偿，但是补偿操作执行前有另外的事务更改了数据，这时数据已经变“脏”了，那么这时该如何处理是一个问题。在 TCC 没有这个问题，因为资源已经被 hold 住了），因此对使用者也是比较宽松的，对于现有业务的改造也会比较简单。<br>Saga 实现分两种，一种是 Saga 状态机实现，一种是 Saga AOP Proxy 实现。Saga 状态机实现，在关于参与者服务编排实现又有集中式和协同式两种分支。这点就不展开了。</p><h3 id="TCC-vs-Saga"><a href="#TCC-vs-Saga" class="headerlink" title="TCC vs Saga"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">TCC vs Saga</a></h3><p>TCC 和 Saga 都属于补偿型事务模型，Saga 没有 Try，直接 Commit，所有会产生实际的事务痕迹，而补偿做的是反向操作。TCC 是二阶段的广义实现，利用了数据的中间态，Cancel 是中间状态的数据进行撤销，从而不存在数据污染问题。<br>使用场景对比：</p><ul><li>TCC 适用于执行时间确定且较短、对一致性要求比较高、数据隔离强的业务</li><li>Saga 适用于业务流程长、业务流程多的业务，在银行业金融机构使用广泛</li><li>TCC 对现有业务改造较大，Saga 则相对少点</li></ul><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Seata</a></h2><p>Seata 是一个由阿里做背书的分布式事务框架，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h3 id="AT-模式"><a href="#AT-模式" class="headerlink" title="AT 模式"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">AT 模式</a></h3><p>AT 模式是 Seata 通过拦截、解释用户的 SQL，对业务数据进行加锁、回滚等操作的基于二阶段协议的一个实现。<br>它的特点是对业务无入侵，用户只需关注自己的“业务 SQL”，用户的 “业务 SQL” 作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。<br>在一阶段，Seata 会拦截“业务 SQL”，首先解析 SQL 语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”，然后执行“业务 SQL”更新业务数据，在业务数据更新之后，再将其保存成“after image”，最后生成行锁。以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。<br>二阶段如果是提交的话，因为“业务 SQL”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1621911086887-3ddcccee-8575-4fb6-b3cf-e1ed26a52971.png#align=left&display=inline&height=664&margin=%5Bobject%20Object%5D&originHeight=664&originWidth=1080&size=0&status=done&style=none&width=1080"></p><h3 id="TCC-模式"><a href="#TCC-模式" class="headerlink" title="TCC 模式"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">TCC 模式</a></h3><p>Seata 的 TCC 模式跟上面讲的 TCC 事务模型差不多</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1621911102959-77cf62b3-faa2-40d6-aa3e-263a88920157.png#align=left&display=inline&height=585&margin=%5Bobject%20Object%5D&originHeight=585&originWidth=1080&size=0&status=done&style=none&width=1080"></p><h3 id="Saga-模式"><a href="#Saga-模式" class="headerlink" title="Saga 模式"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Saga 模式</a></h3><p>Saga 模式也是上面讲的 Saga 事务模型差不多。在 Seata 中对服务的编排引入了状态机引擎， 使得对业务流程的定义更加标准化，提高可读性，不过相对来说配置会比较复杂繁琐。同时支持注解的方式，这个在开发上会简单一点，但功能可能少一点。</p><h1 id="分布式事务一致性与-Paxos-一致性的思考"><a href="#分布式事务一致性与-Paxos-一致性的思考" class="headerlink" title="分布式事务一致性与 Paxos 一致性的思考"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">分布式事务一致性与 Paxos 一致性的思考</a></h1><p>首先要明确一点的就是对于上述提到的分布式事务解决方案，如 TCC、Saga、本地消息表等，其本质都是 2PC。<br>Paxos 算法解决的问题是一个分布式系统如何就某个值（决议）达成一致。<br>咋看起来 2PC 和 Paxos 都是解决关于“一致性”的问题，其实细想它们解决的问题不在一个层面。<br>2PC 要求分布式系统中的每个节点要不全部成功，要不全部失败，强调的是原子性。<br>Paxos 要求多个副本之间的数据一致性，其实这里用“一致性”并不准确，应该用“共识（Consensus）”才对。<br>例如 2PC 中的协调者单点的问题可以用 Paxos 算法通过选举出新的协调者来解决。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==%E2%88%A3=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">总结</a></h1><p>总得看来，分布式事务的解决方案都很难做到有高一致性的同时，也有高性能，同时在实现上也有一定的难度。在业务允许的情况下，我们通常处理分布式事务的一般原则应是：业务规避 &gt; 最终一致 &gt; 强一致。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot单元测试</title>
      <link href="2021/04/13/yuque/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>2021/04/13/yuque/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://blinkfox.github.io/2018/11/15/hou-duan/java/dan-yuan-ce-shi-zhi-nan/">单元测试指南</a>一文中写到过单元测试的必要性和 Java 单元测试相关的工具及方法。单元测试能帮助我们在早期就规避、发现和修复很多不易察觉的 bug 和漏洞，而且更能保障后期的需求变动和代码重构时所带来的隐患，减少测试成本和维护成本。在 SpringBoot2.x 集成和写单元测试更加容易了。</p><h2 id="创建-SpringBoot2-x-项目"><a href="#创建-SpringBoot2-x-项目" class="headerlink" title="创建 SpringBoot2.x 项目"></a>创建 SpringBoot2.x 项目</h2><p>在<a href="https://start.spring.io/">start.spring.io</a>中创建一个自己的 SpringBoot2.x 项目，目前版本 2.1.3。选出自己需要的一些组件生成项目即可，我这里选了如下几个：</p><ul><li>Web: Web 项目</li><li>JPA: 数据库持久层采用<a href="https://spring.io/guides/gs/accessing-data-jpa/">Spring Data JPA</a>，方便实用</li><li>Lombok: 可以通过注解大量减少 Java 中重复代码的书写</li><li>HSQLDB: 内存数据库，用来对 Repository 层做单元测试</li></ul><p>生成之后可以在 pom.xml 中看到 SpringBoot2.x 项目中已经引入了 spring-boot-starter-test 这个启动组件，包含了几乎绝大多数测试场景需要的组件。然后通过 mvn clean install 来构建本项目或者直接导入 IDE 开发工具即可。<br>下面将以对博客信息做简单修改和查询为示例来说明在 Spring Boot 中如何分别对 DAO，Service，Controller 做单元测试。</p><h2 id="DAO-层的单元测试"><a href="#DAO-层的单元测试" class="headerlink" title="DAO 层的单元测试"></a>DAO 层的单元测试</h2><h3 id="新建数据库脚本"><a href="#新建数据库脚本" class="headerlink" title="新建数据库脚本"></a>新建数据库脚本</h3><p>DAO 层的测试我这里采用的是 HSQLDB 的内存数据库，最好准备一些初始化的数据表结构和脚本，当然也可用直接通过官方示例的 JPA 特性和 API 代码来初始化数据。这里我还是通过脚本的方式来做，便于统一管理和维护表结构和数据。<br>在 src/test 目录下新建 resources 资源目录，并在 resources 目录下新建 db 目录，在 db 目录下分别，新建用于管理的表结构文件(schema.sql)和初始化数据文件(data.sql)的 SQL 脚本。<br>schema.sql 文件中的内容如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建数据库表所在的模式 schema.</span><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> test<span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 在 test 模式下创建数据库表.</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> test<span class="token punctuation">.</span>t_test_blog<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>t_test_blog <span class="token punctuation">(</span>    c_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    c_author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c_content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dt_publish_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    c_title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c_url <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    n_status <span class="token keyword">int</span><span class="token punctuation">,</span>    c_create_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dt_create_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    dt_update_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk_test_blog <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><p>data.sql 文件中的内容如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 初始化插入一些博客信息数据.</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">.</span>t_test_blog <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'这是内容'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:01'</span><span class="token punctuation">,</span> <span class="token string">'Spring从入门到精通'</span><span class="token punctuation">,</span> <span class="token string">'https://baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:33'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:36'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">.</span>t_test_blog <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'这是Mybatis的内容'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:01'</span><span class="token punctuation">,</span> <span class="token string">'Mybatis基础'</span><span class="token punctuation">,</span> <span class="token string">'https://qq.com'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:33'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:36'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>hsqldb<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>db_test <span class="token comment"># 以内存数据库的方式来运行.</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.hsqldb.jdbc.JDBCDriver    <span class="token key atrule">platform</span><span class="token punctuation">:</span> hsqldb    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema.sql    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data.sql  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> none <span class="token comment"># 这里没用 JPA 的自动生成表结构等功能，你可以视自己的具体情况来开启.</span>    <span class="token key atrule">generate-ddl</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 启动时是否初始化数据库.</span></code></pre><h3 id="准备实体-POJO-和-DAO-层-Repository-类"><a href="#准备实体-POJO-和-DAO-层-Repository-类" class="headerlink" title="准备实体 POJO 和 DAO 层 Repository 类"></a>准备实体 POJO 和 DAO 层 Repository 类</h3><p>博客信息的实体 POJO 类如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Column</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span><span class="token punctuation">;</span><span class="token comment">/** * 博客实体. * * @author sbwit on 2019-2-26. */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_test_blog"</span><span class="token punctuation">,</span> schema <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * ID.     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 作者.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_author"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token comment">/**     * 标题.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_title"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token comment">/**     * 内容.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_content"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token comment">/**     * 发布时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_publish_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> publishTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 链接地址.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_url"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token comment">/**     * 状态.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"n_status"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建用户.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_create_user"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createUser<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 最后更新时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>下面是 BlogRepository 中的一个简单的自定义@Query 查询，当然你也可以采用名称的规则来写本查询，我这里为了做示例，使用了@Query 查询。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Query</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token comment">/** * BlogRepository. * * @author sbwit on 2019-02-27. */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT b FROM Blog AS b WHERE b.title like 'Spring%'"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="BlogRepository-的单元测试"><a href="#BlogRepository-的单元测试" class="headerlink" title="BlogRepository 的单元测试"></a>BlogRepository 的单元测试</h3><p>然后在 Intellij IDEA 中通过 Ctrl + Shift + T 来为 BlogRepository 生成它对应的单元测试类 BlogRepositoryTest。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">DataJpaTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token comment">/** * BlogRepositoryTest. * * @author sbwit on 2019-03-01. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"hsqldb"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DataJpaTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogRepositoryTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">BlogRepository</span> blogRepository<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试新增博客的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"newblogId"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">"Java 从入门到放弃"</span><span class="token punctuation">;</span>        blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogOptional <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> title<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试查询所有 Spring 相关的博客信息.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogs <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Spring从入门到精通"</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就完成了 DAO 层代码的测试，以上程序主要依托于内存数据库 HSQLDB 和 Spring Data JPA。</p><h2 id="Service-层的单元测试"><a href="#Service-层的单元测试" class="headerlink" title="Service 层的单元测试"></a>Service 层的单元测试</h2><p>实际开发过程中，Service 层中的类依赖了 DAO 层中的类或其他 Service 类。为了隔离对其他 Service 类或 DAO 层中的类的依赖，只测试本 Service 类中的方法逻辑，就需要 Mock 数据和做打桩等操作。Spring Boot 中原生集成了<a href="https://site.mockito.org/">Mockito</a>，可以非常方便我们对 Java 代码做单元测试。</p><h3 id="新建-BlogService-类"><a href="#新建-BlogService-类" class="headerlink" title="新建 BlogService 类"></a>新建 BlogService 类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">BlogRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/** * BlogService. * * @author sbwit on 2019-03-01. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">BlogRepository</span> blogRepository<span class="token punctuation">;</span>    <span class="token comment">/**     * 查询所有 Spring 相关的博客信息.     *     * @return 博客信息     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入了获取 Spring 相关博客的 Service 方法."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据博客ID来修改该博客的名称.     *     * @param id 博客ID     * @param title 博客标题     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogOptional <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>blogOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"需要修改名称的博客不存在，id为【&#123;&#125;】请检查！"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="BlogService-的单元测试"><a href="#BlogService-的单元测试" class="headerlink" title="BlogService 的单元测试"></a>BlogService 的单元测试</h3><p>通过<code>BlogService</code>可以生成和书写出其对应的单元测试类和测试方法，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">BlogRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">InjectMocks</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">MockitoJUnitRunner</span><span class="token punctuation">;</span><span class="token comment">/** * BlogServiceTest. * * @author sbwit on 2019-03-01. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">MockitoJUnitRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">private</span> <span class="token class-name">BlogRepository</span> blogRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@InjectMocks</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试service层中获取Spring相关博客的方法.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构造需要返回的博客信息集合数据.</span>        <span class="token class-name">Blog</span> blog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring Action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>blogList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogs <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 断言验证查询到的数据.</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Spring Action"</span><span class="token punctuation">,</span> blog<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试根据博客ID来修改该博客的名称成功时的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Mock 相关数据和类方法的行为.</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"算法导论"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证 blogRepository.save(s) 方法被调用过一次.</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试根据博客ID来修改该博客的名称失败时的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileByIdWithFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Mock 未根据 ID 找到对应的博客信息的情况.</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"算法导论"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证 blogRepository.save(s) 方法并没有被调用过.</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注意</strong>：这里的<code>@RunWith</code>采用的是 Mocktio 提供的<code>MockitoJUnitRunner</code>。</p><p>这样就完成了 Service 层的单元测试，也是我们业务开发中需要重点关注和测试业务逻辑的一层。</p><h2 id="Controller-层的单元测试"><a href="#Controller-层的单元测试" class="headerlink" title="Controller 层的单元测试"></a>Controller 层的单元测试</h2><p>Controller 层测试的重点是测试接口是否能正常工作。可以用到 Spring Boot 中提供的@WebMvcTest 注解来模拟 Web 层的单元测试。当然，也需要通过 Mock 的方式类隔离对 Service 层各个类的依赖影响。</p><h3 id="新建-BlogController-类"><a href="#新建-BlogController-类" class="headerlink" title="新建 BlogController 类"></a>新建 BlogController 类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">BlogService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PatchMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token comment">/** * BlogController. * * @author sbwit on 2019-02-28. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 获取所有 Spring 相关的博客信息.     *     * @return Spring相关的博客信息     */</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据博客ID修改博客名称.     *     * @param id 博客ID     * @param title 博客标题     * @return 空     */</span>    <span class="token annotation punctuation">@PatchMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"修改博客名称成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改博客名称出错，id为【&#123;&#125;】."</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sbwit<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>patch<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">BlogService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">WebMvcTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span><span class="token punctuation">;</span><span class="token comment">/** * BlogControllerTest. * * @author sbwit on 2019-03-02. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">BlogController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogControllerTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MockBean</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试获取所有 Spring 相关的博客信息.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试修改博客标题成功时的情况.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/blogs/1?title=Spring实战"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试修改博客标题失败时的情况.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileByIdWithException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/blogs/1?title=Spring实战"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就完成了对 Controller 层的单元测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Spring Boot 中做单元测试的将会非常容易。上面只是 Spring Boot 中提供的部分方式，<a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features-testing">Spring Boot 文档</a>中还有其他更多的测试场景和测试方法供你去参考和使用。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试指南</title>
      <link href="2021/04/13/yuque/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/"/>
      <url>2021/04/13/yuque/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一、必要性"><a href="#一、必要性" class="headerlink" title="一、必要性"></a>一、必要性</h2><p>在我们公司中要做单元测试，确实比较难，因为公司缺少这种氛围，有也只是局部的，大多数工程师没有这方面的习惯和素养，很多人都是有一定的抵触的心理，经过我私下的了解大概有以下几种原因吧。</p><ul><li>写单元测试太<strong>耗费时间</strong>了，项目要赶进度，编写单元测试会导致不能按时完成开发任务，<strong>导致项目延期</strong>；</li><li>做<em>传统 xx 管理系统</em>的项目，业务逻辑比较简单，主要就是对业务数据做<strong>增删改查</strong>，单元测试意义和价值不高；</li><li>公司有专门的测试人员，很多问题在集成测试时一定能发现。</li><li>以前项目上从没写过单元测试，没有经验，不知道怎么编写单元测试；</li></ul><p>这其中对单元测试就有些误解了，单元测试有几个比较常见的典型场景：</p><ul><li>开发前写单元测试，通过测试描述需求，即<a href="https://www.ibm.com/developerworks/cn/linux/l-tdd/">测试驱动开发</a>。</li><li>在开发过程中及时得到反馈，提前规避隐患和发现问题。</li><li>应用于自动化构建或持续集成流程，对每次代码修改做回归测试。</li><li>作为重构的基础，验证重构是否可靠。</li></ul><p>还有最重要的一点：<strong>编写单元测试的难易程度能够直接反应出代码的设计水平，能写出单元测试和写不出单元测试之间体现了编程能力上的巨大的鸿沟。无论是什么样的程序员，坚持编写一段时间的单元测试之后，都会明显感受到代码设计能力的巨大提升</strong>。<br>公司开发人员的代码质量往往不是很高，尤其是对代码的拆分和逻辑的抽象还处于懵懂阶段。要对这类代码写单测，即使是工作了 3，4 年的高级码农也是一个挑战，对新人来说几乎是不可能完成的任务。这也让很多开发人员有了<strong>写单元测试很难</strong>的感觉。所以，<strong>写单元测试的难易程度跟代码的质量关系最大，并且是决定性的</strong>。项目里无论用了哪个测试框架都不能解决代码本身难以测试的问题。<br>诚然，写单元测试在开发期间的确是会耗费更多时间的，尤其是要追求很高(超过 80%，甚至 100%)的代码覆盖率，更是需要耗费大量心血才能达到的。对于一些只需一次交付，很少维护的项目来说，意义和价值确实不是很大。但这本质上是属于为了赚快钱，不负责任的行为了，毕竟谁都无法保障自己写的程序，真的没有丝毫问题。这个问题的出现并不是个人的问题，而是反映了公司项目管理中的问题。当然，个人的原因也存在，就是如何在有限的时间里，提高效率。<br>目前公司的大多数项目其实都有着至少两年的维护时间的，很多开发人员都不愿意把自己的时间耗在一个代码很烂、没有单元测试保障且经常变更需求的项目里面。总之，包括我本人在内，都是有项目<strong>维护恐惧症</strong>的，更愿意投入到新项目的开发中。但是新项目里面还是没有单元测试的保障，代码质量逐渐低劣，如此就又形成了一个不断的循环之中。无法挣脱这个循环的人员就只能选择离职了，也许不慎又到了新的漩涡里面。<br>一个 bug 被隐藏的时间越长，修复这个 bug 的代价就越大。<br>单元测试能帮助我们在早期就规避、发现和修复很多不易察觉的 bug 和漏洞，而且更能保障后期的需求变动和代码重构时所带来的隐患，减少测试成本和维护成本。所以，在新项目中逐步推广和编写单元测试是有必要的，这将大大提高项目中代码的质量和可靠性，有些老项目中就算了吧，往往维护人员的负面情绪可能会更多，一些新的功能特性倒是可以试试。虽然写好单元测试很难，但<strong>写单元测试的难度其实是小于决定写单元测试的勇气的</strong>。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p><strong>单元测试</strong>：单元测试又称模块测试，属于白盒测试，是最小单位的测试。模块分为程序模块和功能模块。功能模块指实现了一个完整功能的模块（单元），一个完整的程序单元具备输入、加工和输出三个环节。而且每个程序单元都应该有正规的规格说明，使之对其输入、加工和输出的关系做出名明确的描述。<br><strong>驱动测试</strong>：驱动被测试模块正常运行起来的实体。通俗的说法就是你负责测试模块/方法是中间的，没有 main()方法入口，怎么编译，怎么启动呢？就需要写一个带 main()的方法来调用你的模块/方法，这个就是驱动测试。<br><strong>测试桩</strong>：代替被测模块调用的子模块的实体，该实体一般为桩函数（stub）。通俗的说法就是你负责测试的模块/方法所调用的模块/方法，所以你需要模仿他们做一个返回值（假的，但符合设计）。<br><strong>测试覆盖</strong>：评测测试过程中已经执行的代码的多少。<br><strong>测试覆盖率</strong>：代码的覆盖程度，一种度量方式。针对代码的测试覆盖率有很多种度量方式，常见的有以下几种:</p><ul><li>语句覆盖</li><li>判定覆盖</li><li>路径覆盖</li></ul><p>测试覆盖率数据到底有多大意义。主要有以下几个观点：</p><ul><li>路径覆盖率 &gt; 判定覆盖 &gt; 语句覆盖</li><li>覆盖率数据只能代表你测试过哪些代码，不能代表你是否测试好这些代码。</li><li>不要过于相信覆盖率数据，100%的测试覆盖率并不能保证 bug 的不出现。</li><li>代码覆盖率只是一个最基本的前提，一定要保证，但不是意味着达到指标就代表测试的完成</li><li>测试人员不能盲目追求代码覆盖率，而应该想办法设计更多更好的案例，哪怕多设计出来的案例对覆盖率一点影响也没有。</li></ul><h2 id="三、单元测试工具"><a href="#三、单元测试工具" class="headerlink" title="三、单元测试工具"></a>三、单元测试工具</h2><p>在 Java 中有非常多的单元测试的工具或框架可供选择，我这里只选择一些常用的、主流的单元测试框架或者工具来作介绍和使用。</p><ul><li><a href="https://junit.org/junit5/">JUnit</a>：Java 中最有名、使用最广泛的单元测试框架</li><li><a href="http://site.mockito.org/">Mockito</a>：模拟框架，可以让你用干净而简单的 API 编写测试</li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html">Spring Test</a>: 使用 Spring Test 来对 Spring 相关的项目做单元测试，其中会结合或者集成其他测试框架和工具</li><li><a href="https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#boot-features-testing">spring-boot-starter-test</a>: SpringBoot 项目中的单元测试</li><li><a href="https://www.eclemma.org/jacoco/trunk/index.html">JaCoCo</a>: 使用离线和运行时字节码工具来收集代码覆盖率指标的框架。</li></ul><h3 id="1-JUnit4"><a href="#1-JUnit4" class="headerlink" title="1. JUnit4"></a>1. JUnit4</h3><p>JUnit 是使用 Java 语言编写的用于编写和运行可重复的自动化测试的开源测试框架。除了 Junit 之外，<a href="http://testng.org/doc/">TestNg</a>也是 Java 中非常受欢迎的单元测试框架。两种框架在功能上看起来非常相似，这里有一篇关于<a href="https://www.mkyong.com/unittest/junit-4-vs-testng-comparison/">JUnit 4 与 TestNG 的对比</a>，还有一篇较为全面的介绍<a href="https://www.guru99.com/all-about-testng-and-selenium.html">TestNG 的教程</a>，总体来说，TestNG 比 Junit4 功能更强大一些，但是相比 Junit5 而言，TestNG 又落后了一代。开源的轮子滚滚向前，都是一代新的轮子超越一代老的轮子。所以，我们这里就只选择 Junit 来作单元测试框架的介绍了吧。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/131683/1619015849653-b8b1f5e1-7bee-419b-8ae8-7551c9501b78.png#clientId=uf3c42f81-c2f5-4&from=paste&height=195&id=u00570095&margin=%5Bobject%20Object%5D&name=image.png&originHeight=195&originWidth=651&originalType=binary&size=116193&status=done&style=none&taskId=u01976205-6756-49bc-b954-7f5001e23d9&width=651" alt="image.png"><br><strong>JUnit4 和 TestNG 的功能比较</strong><br>目前最新版本是 JUnit5.2.0，相比 JUnit4 而言有很大的改变，这里主要讲解 JUnit4 的使用(目前的新老项目中应该使用的更多)，并对 JUnit5 做简要介绍。学习了 Junit4 的主要使用方式之后，大家再去看<a href="http://sjyuan.cc/junit5/user-guide-cn/">JUnit5 用户指南</a>在将来逐渐使用起来更好些。</p><h4 id="1-简单示例"><a href="#1-简单示例" class="headerlink" title="(1). 简单示例"></a>(1). 简单示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculateTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Calculate</span> calculation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> calculation<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> testSum <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Test sum(): "</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> testSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> testSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-注解"><a href="#2-注解" class="headerlink" title="(2). 注解"></a>(2). 注解</h4><ul><li>@Test: 测试方法，在这里还可以测试<strong>期望异常</strong>和<strong>超时时间</strong>。</li><li>@Before: 每个测试方法执行之前执行的方法。</li><li>@BeforeClass: 一个测试类中所有测试方法执行之前执行的方法，只执行一次，且方法必须为 static 的。</li><li>@After: 每个测试方法执行之后执行的方法。</li><li>@AfterClass: 一个测试类中所有测试方法执行之后执行的方法，只执行一次，且方法必须为 static 的。</li><li>@Ignore: 忽略的测试方法。</li><li>@RunWith: 指定测试类使用某个运行器。</li><li>@Parameters: 参数化测试，指定测试类的测试数据集合。</li><li>@FixMethodOrder: 注解在测试类上指定测试方法按一定顺序规则来执行，有三种。</li></ul><p>一个测试类单元测试的执行顺序为：<br><code>@BeforeClass –&gt; @Before –&gt; @Test –&gt; @After –&gt; @AfterClass</code><br>每一个测试方法的执行顺序为：<br><code>@Before –&gt; @Test –&gt; @After</code><br>综合示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span> testList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeforeClass</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onceExecutedBeforeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@BeforeClass: onceExecutedBeforeAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executedBeforeEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        testList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Before: executedBeforeEach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterClass</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onceExecutedAfterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@AfterClass: onceExecutedAfterAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executedAfterEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        testList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@After: executedAfterEach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">EmptyCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>testList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Test: EmptyArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OneItemCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        testList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"oneItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> testList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Test: OneItemArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Ignore</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executionIgnored</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Ignore: This execution is ignored"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果我们运行上面的测试，控制台输出将是以下几点：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BeforeClass</span><span class="token operator">:</span> onceExecutedBeforeAll<span class="token annotation punctuation">@Before</span><span class="token operator">:</span> executedBeforeEach<span class="token annotation punctuation">@Test</span><span class="token operator">:</span> <span class="token class-name">EmptyArrayList</span><span class="token annotation punctuation">@After</span><span class="token operator">:</span> executedAfterEach<span class="token annotation punctuation">@Before</span><span class="token operator">:</span> executedBeforeEach<span class="token annotation punctuation">@Test</span><span class="token operator">:</span> <span class="token class-name">OneItemArrayList</span><span class="token annotation punctuation">@After</span><span class="token operator">:</span> executedAfterEach<span class="token annotation punctuation">@AfterClass</span><span class="token operator">:</span> onceExecutedAfterAll</code></pre><h4 id="3-断言"><a href="#3-断言" class="headerlink" title="(3). 断言"></a>(3). 断言</h4><p>断言是编写测试用例的核心实现方式，即期望值是多少，测试的结果是多少，以此来判断测试是否通过。JUnit4.x 中的断言核心方法如下：</p><ul><li>assertArrayEquals(expecteds, actuals): 查看两个数组是否相等。</li><li>assertEquals(expected, actual): 查看两个对象是否相等。类似于字符串比较使用的 equals()方法。</li><li>assertNotEquals(first, second): 查看两个对象是否不相等。</li><li>assertNull(object): 查看对象是否为空。</li><li>assertNotNull(object): 查看对象是否不为空。</li><li>assertSame(expected, actual): 查看两个对象的引用是否相等。类似于使用“==”比较两个对象。</li><li>assertNotSame(unexpected, actual): 查看两个对象的引用是否不相等。类似于使用“!=”比较两个对象。</li><li>assertTrue(condition): 查看运行结果是否为 true。</li><li>assertFalse(condition): 查看运行结果是否为 false。</li><li>assertThat(actual, matcher): 查看实际值是否满足指定的条件。</li><li>fail(): 让测试失败。</li></ul><h4 id="4-套件测试"><a href="#4-套件测试" class="headerlink" title="(4). 套件测试"></a>(4). 套件测试</h4><p>测试套件意味着捆绑几个单元测试用例并且一起执行他们。在 JUnit 中，@RunWith 和@Suite 注释用来运行套件测试。简单示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJunit1</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPrint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test Junit 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJunit2</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPrint2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test Junit 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">Suite</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Suite.SuiteClasses</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token class-name">TestJunit1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>   <span class="token class-name">TestJunit2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTestSuite</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="5-参数化测试"><a href="#5-参数化测试" class="headerlink" title="(5). 参数化测试"></a>(5). 参数化测试</h4><p>一个测试类也可以被看作是一个参数化测试类。但它要满足下列所有要求：</p><ul><li>该类被注解为@RunWith(Parameterized.class)。</li><li>这个类有一个构造函数，存储测试数据。</li><li>这个类有一个静态方法生成并返回测试数据，并注明@Parameters 注解。</li><li>这个类有一个测试，它需要注解@Test 到方法。</li></ul><p>简单示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertEquals<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized<span class="token punctuation">.</span>Parameters</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculateTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> expected<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CalculateTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> expectedResult<span class="token punctuation">,</span> <span class="token keyword">int</span> firstNumber<span class="token punctuation">,</span> <span class="token keyword">int</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expected <span class="token operator">=</span> expectedResult<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> firstNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> secondNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Collection</span> <span class="token function">addedNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Calculate</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Addition with parameters : "</span> <span class="token operator">+</span> first <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> add<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行 CalculateTest 测试用例，控制台输出如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Addition</span> <span class="token keyword">with</span> <span class="token namespace">parameters</span> <span class="token operator">:</span> <span class="token number">1</span> and <span class="token number">2</span><span class="token class-name">Adding</span> values<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token class-name">Addition</span> <span class="token keyword">with</span> <span class="token namespace">parameters</span> <span class="token operator">:</span> <span class="token number">2</span> and <span class="token number">3</span><span class="token class-name">Adding</span> values<span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token class-name">Addition</span> <span class="token keyword">with</span> <span class="token namespace">parameters</span> <span class="token operator">:</span> <span class="token number">3</span> and <span class="token number">4</span><span class="token class-name">Adding</span> values<span class="token operator">:</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token class-name">Addition</span> <span class="token keyword">with</span> <span class="token namespace">parameters</span> <span class="token operator">:</span> <span class="token number">4</span> and <span class="token number">5</span><span class="token class-name">Adding</span> values<span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span></code></pre><h4 id="6-忽略测试"><a href="#6-忽略测试" class="headerlink" title="(6). 忽略测试"></a>(6). 忽略测试</h4><p>有时可能会发生我们的代码还没有准备好的情况，这时测试用例去测试这个方法或代码的时候会造成失败。@Ignore 注释会在这种情况时帮助我们。</p><ul><li>一个含有@Ignore 注释的测试方法将不会被执行。</li><li>如果一个测试类有@Ignore 注释，则它的测试方法将不会执行</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTest3</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Ignore</span><span class="token punctuation">(</span><span class="token string">"该测试方法还没准备好运行."</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在上面的示例中，JUnit 将不会执行 testHello()方法。</p><h4 id="7-异常测试"><a href="#7-异常测试" class="headerlink" title="(7). 异常测试"></a>(7). 异常测试</h4><p>它用于测试由方法抛出的异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTest4</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWithException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在上面的示例中，testWithException()方法将抛出 ArithmeticException 异常，因为这是一个预期的异常，因此单元测试会通过。</p><h4 id="8-超时测试"><a href="#8-超时测试" class="headerlink" title="(8). 超时测试"></a>(8). 超时测试</h4><p><strong>超时测试</strong>是指，一个单元测试运行时间是否超过指定的毫秒数，测试将终止并标记为失败。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTest5</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// do nothing.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在上面的示例中，testTimeout()方法将不会返回，因此 JUnit 引擎会将其标记为失败，并抛出一个异常。java.lang.Exception:test timed out after 1000 milliseconds。</p><h4 id="9-Hamcrest"><a href="#9-Hamcrest" class="headerlink" title="(9). Hamcrest"></a>(9). Hamcrest</h4><p>在实际开发中，一些基本的断言，如 eqaul,null,true 它们的可读性并不是很好。而且很多时候我们要比较对象、集合、Map 等数据结构。这样我们要么进行大段的字段获取再断言。或者干脆自己编写表达式并断言其结果。JUnit4.4 引入了 Hamcrest 框架，Hamcest 提供了一套匹配符 Matcher，这些匹配符更接近自然语言，可读性高，更加灵活。<br><a href="http://hamcrest.org/">Hamcrest</a>提供了大量被称为“匹配器”的方法。其中每个匹配器都设计用于执行特定的比较操作。Hamcrest 的可扩展性很好，让你能够创建自定义的匹配器。最重要的是，JUnit 也包含了 Hamcrest 的核心，提供了对 Hamcrest 的原生支持，可以直接使用 Hamcrest。当然要使用功能齐备的 Hamcrest，还是要引入对它的依赖。<br>看个对比例子，前者使用 Junit 的 断言，后者使用 Hamcrest 的断言。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_with_junit_assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> actual <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"failure - They are not same!"</span><span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_with_hamcrest_assertThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> actual <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"failure - They are not same!"</span><span class="token punctuation">,</span> actual<span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 联合匹配符not和equalTo表示“不等于”</span><span class="token function">assertThat</span><span class="token punctuation">(</span> something<span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span> <span class="token function">equalTo</span><span class="token punctuation">(</span> <span class="token string">"developer"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 联合匹配符not和containsString表示“不包含子字符串”</span><span class="token function">assertThat</span><span class="token punctuation">(</span> something<span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span> <span class="token function">containsString</span><span class="token punctuation">(</span> <span class="token string">"Works"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 联合匹配符anyOf和containsString表示“包含任何一个子字符串”</span><span class="token function">assertThat</span><span class="token punctuation">(</span>something<span class="token punctuation">,</span> <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"developer"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"Works"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 assertThat 的优点：</p><ol><li>Hamcrest 一条 assertThat 即可以替代其他所有的 assertion 语句，这样可以在所有的单元测试中只使用一个断言方法，使得编写测试用例变得简单，代码风格变得统一，测试代码也更容易维护。</li><li>assertThat 使用了 Hamcrest 的 Matcher 匹配符，用户可以使用匹配符规定的匹配准则精确的指定一些想设定满足的条件，具有很强的易读性，而且使用起来更加灵活</li><li>assertThat 不再像 assertEquals 那样，使用比较难懂的“谓宾主”语法模式（如：assertEquals(3, x);），相反，assertThat 使用了类似于“主谓宾”的易读语法模式（如：assertThat(x,is(3));），使得代码更加直观、易读。</li><li>可以将这些 Matcher 匹配符联合起来灵活使用，达到更多目的。</li></ol><p>JUnit 4.4 自带了一些 Hamcrest 的匹配符 Matcher，但是只有有限的几个，在类 org.hamcrest.CoreMatchers 中定义，要想使用他们，必须导入包 org.hamcrest.CoreMatchers.*。<br>Hamcrest 提供了很强大的一些 api 供我们进行测试断言。</p><pre class="language-bash" data-language="bash"><code class="language-bash">核心：    anything - 总是匹配,如果你不关心测试下的对象是什么是有用的    describedAs - 添加一个定制的失败表述装饰器    is - 改进可读性装饰器 - 见下 “Sugar”逻辑：    allOf - 如果所有匹配器都匹配才匹配,像Java里的<span class="token operator">&amp;&amp;</span>    anyOf - 如果任何匹配器匹配就匹配,像Java里的<span class="token operator">||</span>    not - 如果包装的匹配器不匹配器时匹配,反之亦然对象：    equalTo - 测试对象相等使用Object.equals方法    hasToString - 测试Object.toString方法    instanceOf, isCompatibleType - 测试类型    notNullValue, nullValue - 测试null    sameInstance - 测试对象实例Beans：    hasProperty - 测试JavaBeans属性集合：    array - 测试一个数组元素test an array’s elements against an array of matchers    hasEntry, hasKey, hasValue - 测试一个Map包含一个实体,键或者值    hasItem, hasItems - 测试一个集合包含一个元素    hasItemInArray - 测试一个数组包含一个元素数字：    closeTo - 测试浮点值接近给定的值    greaterThan, greaterThanOrEqualTo, lessThan, lessThanOrEqualTo - 测试次序文本：    equalToIgnoringCase - 测试字符串相等忽略大小写    equalToIgnoringWhiteSpace - 测试字符串忽略空白    containsString, endsWith, startsWith - 测试字符串匹配</code></pre><p>以下示例代码列举了大部分 assertThat 的使用例子，供大家学习使用时参考：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//---------------- 字符相关匹配符 ----------------</span><span class="token comment">/**equalTo匹配符断言被测的testedValue等于expectedValue，* equalTo可以断言数值之间，字符串之间和对象之间是否相等，相当于Object的equals方法*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedValue<span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span>expectedValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**equalToIgnoringCase匹配符断言被测的字符串testedString*在忽略大小写的情况下等于expectedString*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">equalToIgnoringCase</span><span class="token punctuation">(</span>expectedString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**equalToIgnoringWhiteSpace匹配符断言被测的字符串testedString*在忽略头尾的任意个空格的情况下等于expectedString，*注意：字符串中的空格不能被忽略*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">equalToIgnoringWhiteSpace</span><span class="token punctuation">(</span>expectedString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**containsString匹配符断言被测的字符串testedString包含子字符串subString**/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">containsString</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**endsWith匹配符断言被测的字符串testedString以子字符串suffix结尾*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**startsWith匹配符断言被测的字符串testedString以子字符串prefix开始*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ---------------- 一般匹配符 ----------------</span><span class="token comment">/**nullValue()匹配符断言被测object的值为null*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token function">nullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**notNullValue()匹配符断言被测object的值不为null*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token function">notNullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**is匹配符断言被测的object等于后面给出匹配表达式*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span>expectedValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**is匹配符简写应用之一，is(equalTo(x))的简写，断言testedValue等于expectedValue*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedValue<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span>expectedValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**is匹配符简写应用之二，is(instanceOf(SomeClass.class))的简写，*断言testedObject为Cheddar的实例*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedObject<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token class-name">Cheddar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**not匹配符和is匹配符正好相反，断言被测的object不等于后面给出的object*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedString<span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span>expectedString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**allOf匹配符断言符合所有条件，相当于“与”（&amp;&amp;）*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedNumber<span class="token punctuation">,</span> <span class="token function">allOf</span><span class="token punctuation">(</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lessThan</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**anyOf匹配符断言符合条件之一，相当于“或”（||）*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedNumber<span class="token punctuation">,</span> <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lessThan</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ---------------- 数值相关匹配符 ----------------</span><span class="token comment">/**closeTo匹配符断言被测的浮点型数testedDouble在20.0¡À0.5范围之内*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedDouble<span class="token punctuation">,</span> <span class="token function">closeTo</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**greaterThan匹配符断言被测的数值testedNumber大于16.0*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedNumber<span class="token punctuation">,</span> <span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** lessThan匹配符断言被测的数值testedNumber小于16.0*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedNumber<span class="token punctuation">,</span> lessThan <span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** greaterThanOrEqualTo匹配符断言被测的数值testedNumber大于等于16.0*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedNumber<span class="token punctuation">,</span> greaterThanOrEqualTo <span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** lessThanOrEqualTo匹配符断言被测的testedNumber小于等于16.0*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>testedNumber<span class="token punctuation">,</span> lessThanOrEqualTo <span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ---------------- 集合相关匹配符 ----------------</span><span class="token comment">/**hasEntry匹配符断言被测的Map对象mapObject含有一个键值为"key"对应元素值为"value"的Entry项*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>mapObject<span class="token punctuation">,</span> <span class="token function">hasEntry</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**hasItem匹配符表明被测的迭代对象iterableObject含有元素element项则测试通过*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>iterableObject<span class="token punctuation">,</span> hasItem <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** hasKey匹配符断言被测的Map对象mapObject含有键值“key”*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>mapObject<span class="token punctuation">,</span> hasKey <span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** hasValue匹配符断言被测的Map对象mapObject含有元素值value*/</span><span class="token function">assertThat</span><span class="token punctuation">(</span>mapObject<span class="token punctuation">,</span> <span class="token function">hasValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-JUnit5"><a href="#2-JUnit5" class="headerlink" title="2. JUnit5"></a>2. JUnit5</h3><h4 id="1-Junit5-简介"><a href="#1-Junit5-简介" class="headerlink" title="(1). Junit5 简介"></a>(1). Junit5 简介</h4><p>JUnit 5 跟以前的 JUnit 版本不一样，它由几大不同的模块组成，这些模块分别来自三个不同的子项目。<br>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage<br>JUnit Platform 是在 JVM 上 启动测试框架 的基础平台。它还定义了 TestEngine API，该 API 可用于开发在平台上运行的测试框架。此外，平台还提供了一个从命令行或者 Gradle 和 Maven 插件来启动的 控制台启动器 ，它就好比一个 基于 JUnit4 的 Runner 在平台上运行任何 TestEngine。<br>JUnit Jupiter 是一个组合体，它是由在 JUnit 5 中编写测试和扩展的新 编程模型 和 扩展模型 组成。另外，Jupiter 子项目还提供了一个 TestEngine，用于在平台上运行基于 Jupiter 的测试。<br>JUnit Vintage 提供了一个 TestEngine，用于在平台上运行基于 JUnit 3 和 JUnit 4 的测试。<br>JUnit 5 需要 Java 8（或更高）的运行时环境。不过，你仍然可以测试那些由老版本 JDK 编译的代码。</p><h4 id="2-简单示例"><a href="#2-简单示例" class="headerlink" title="(2). 简单示例"></a>(2). 简单示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span>assertEquals<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FirstJUnit5Tests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">myFirstTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>表面上来看，使用方式和 Junit4 差别不大，但是与 JUnit4 比较起来还是有些不同的。</p><ol><li>导入测试测试注解（@Test）和断言方法（assertEquals）的包路径不同。</li><li>不需要手动把测试和测试方法声明为 public 了。</li></ol><h4 id="3-注解"><a href="#3-注解" class="headerlink" title="(3). 注解"></a>(3). 注解</h4><p>JUnit Jupiter 支持使用下面表格中的注解来配置测试和扩展框架。<br>所有的核心注解都位于 junit-jupiter-api 模块的 org.junit.jupiter.api`包中。</p><ul><li>@Test: 表示该方法是一个测试方法。与 JUnit 4 的@Test 注解不同的是，它没有声明任何属性，因为 JUnit Jupiter 中的测试扩展是基于它们自己的专用注解来完成的。这样的方法会被继承，除非它们被覆盖。</li><li>@ParameterizedTest: 表示该方法是一个参数化测试（可以用不同的参数多次运行试）。这样的方法会被继承，除非它们被覆盖。</li><li>@RepeatedTest: 表示该方法是一个重复测试的测试模板(让某个测试方法运行多次)。这样的方法会被继承，除非它们被覆盖。</li><li>@TestFactory: 表示该方法是一个动态测试的测试工厂。这样的方法会被继承，除非它们被覆盖。</li><li>@TestInstance: 用于配置所标注的测试类的测试实例生命周期。这些注解会被继承。</li><li>@TestTemplate: 表示该方法是一个测试模板，它会依据注册的提供者所返回的调用上下文的数量被多次调用。这样的方法会被继承，除非它们被覆盖。</li><li>@DisplayName: 为测试类或测试方法声明一个自定义的显示名称(空格、特殊字符甚至是 emojis 表情)。该注解不能被继承。</li><li>@BeforeEach: 表示使用了该注解的方法应该在当前类中每一个使用了@Test、@RepeatedTest、@ParameterizedTest 或者@TestFactory 注解的方法之前执行；类似于 JUnit4 的@Before。这样的方法会被继承，除非它们被覆盖。</li><li>@AfterEach: 表示使用了该注解的方法应该在当前类中每一个使用了@Test、@RepeatedTest、@ParameterizedTest 或者@TestFactory 注解的方法之后执行；类似于 JUnit4 的@After。这样的方法会被继承，除非它们被覆盖。</li><li>@BeforeAll: 表示使用了该注解的方法应该在当前类中所有使用了@Test、@RepeatedTest、@ParameterizedTest 或者@TestFactory 注解的方法之前执行；类似于 JUnit4 的@BeforeClass。这样的方法会被继承（除非它们被隐藏或覆盖），并且它必须是 static 方法（除非”per-class” 测试实例生命周期被使用）。</li><li>@AfterAll: 表示使用了该注解的方法应该在当前类中所有使用了@Test、@RepeatedTest、@ParameterizedTest 或者@TestFactory 注解的方法之后执行；类似于 JUnit4 的@AfterClass。这样的方法会被继承（除非它们被隐藏 或覆盖），并且它必须是 static 方法（除非”per-class” 测试实例生命周期被使用）。</li><li>@Nested: 表示使用了该注解的类是一个内嵌、非静态的测试类(让测试编写者能够表示出几组测试用例之间的关系)。@BeforeAll 和@AfterAll 方法不能直接在@Nested 测试类中使用，（除非”per-class”测试实例生命周期被使用）。该注解不能被继承。</li><li>@Tag: 用于声明过滤测试的 tags，该注解可以用在方法或类上；类似于 TesgNG 的测试组或 JUnit4 的分类。该注解能被继承，但仅限于类级别，而非方法级别。</li><li>@Disable: 用于禁用一个测试类或测试方法；类似于 JUnit4 的@Ignore。该注解不能被继承。</li><li>@ExtendWith: 用于注册自定义扩展。该注解不能被继承。</li></ul><p><strong>注</strong>：被@Test、@TestTemplate、@RepeatedTest、@BeforeAll、@AfterAll、@BeforeEach 或 @AfterEach 注解标注的方法不可以有返回值。<br>在 JUnit5 中的一个测试类的基本生命周期示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Junit5的测试示例类"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LifecycleTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"资源初始化方法"</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initializeExternalResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initializing external resources..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@BeforeEach</span>    <span class="token keyword">void</span> <span class="token function">initializeMockObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Initializing mock objects..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">someTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running some test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">otherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assumeTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running another test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"Why wouldn't these be the same?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Disabled</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"该方法先不执行."</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">disabledTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterEach</span>    <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tearing down..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterAll</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">freeExternalResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Freeing external resources..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>由于 JUnit5 中的新特性很多，限于篇幅就简单介绍到这里了，如想详细了解 Junit5 的更多特性，请前往<a href="https://junit.org/junit5/">Junit5 官网</a>和<a href="http://sjyuan.cc/junit5/user-guide-cn/">JUnit5 用户指南中文版</a>去查看。</p><h3 id="3-Mockito"><a href="#3-Mockito" class="headerlink" title="3. Mockito"></a>3. Mockito</h3><p>在软件开发中提及<strong>Mock</strong>，通常理解为模拟对象。为什么需要模拟? 在我们一开始学编程时,我们所写的对象通常都是独立的，并不依赖其他的类，也不会操作别的类。但实际上，软件中是充满依赖关系的，比如我们会基于 service 业务操作类,而 service 类又是基于数据访问类(DAO)的，依次下去，形成复杂的依赖关系。<br>单元测试的思路就是我们想在不涉及依赖关系的情况下测试代码。这种测试可以让你无视代码的依赖关系去测试代码的有效性。核心思想就是如果代码按设计正常工作，并且依赖关系也正常，那么他们应该会同时工作正常。<br>有些时候，我们代码所需要的依赖可能尚未开发完成，甚至还不存在，那如何让我们的开发进行下去呢？使用 mock 可以让开发进行下去，mock 技术的目的和作用就是<strong>模拟一些在应用中不容易构造或者比较复杂的对象，从而把测试与测试边界以外的对象隔离开</strong>。<br>我们可以自己编写自定义的 Mock 对象实现 Mock 技术，但是编写自定义的 Mock 对象需要额外的编码工作，同时也可能引入错误。现在实现 Mock 技术的优秀开源框架有很多，<a href="http://site.mockito.org/">Mockito</a>就是一个优秀的用于单元测试的 Mock 框架。<br>除了 Mockito 以外，还有一些类似的框架，比如：</p><ul><li><a href="http://easymock.org/">EasyMock</a>：早期比较流行的 MocK 测试框架。它提供对接口的模拟，能够通过录制、回放、检查三步来完成大体的测试过程，可以验证方法的调用种类、次数、顺序，可以令 Mock 对象返回指定的值或抛出指定异常。</li><li><a href="https://github.com/powermock/powermock">PowerMock</a>：这个工具是在 EasyMock 和 Mockito 上扩展出来的，目的是为了解决 EasyMock 和 Mockito 不能解决的问题（比如对 static,final,private 方法均不能 Mock）。其实测试架构设计良好的代码，一般并不需要这些功能，但如果是在已有项目上增加单元测试，老代码有问题且不能改时，就不得不使用这些功能了。</li><li><a href="http://jmockit.org/">JMockit</a>：JMockit 是一个轻量级的 mock 框架是用以帮助开发人员编写测试程序的一组工具和 API，该项目完全基于 Java 5 SE 的 java.lang.instrument 包开发，内部使用 ASM 库来修改 Java 的 Bytecode`。</li><li><a href="http://wiremock.org/">WireMock</a>: 模拟您的 API 以进行快速、可靠和全面的测试。WireMock 是一个基于 HTTP 的 API 的模拟器。有些人可能认为它是一个服务虚拟化工具或模拟服务器。</li></ul><p>Mockito 已经被广泛应用，所以这里重点介绍 Mockito，其他的 Mock 框架也各自有自己的特点，大家下来自己学习或者分享，参考的<a href="https://github.com/hehonghui/mockito-doc-zh">Mockito 中文文档</a>在这里。<br>下面的例子大多都会模拟一个 List，因为大多数人都熟悉它（比如 add()，get()，clear()等方法）。实际上，请不要模拟 List 类，改用真实的实例。</p><h4 id="1-验证行为"><a href="#1-验证行为" class="headerlink" title="(1). 验证行为"></a>(1). 验证行为</h4><p>一旦创建，mock 会记录所有交互，你可以验证所有你想要验证的东西。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 静态导入会使代码更简洁</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment">// 创建mock对象</span><span class="token class-name">List</span> mockedList <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用mock对象</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证行为</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Mock 一旦创建，模拟对象将记住你的所有的交互。然后，您可以选择性地验证您感兴趣的任何行为。</p><h4 id="2-如何做一些测试打桩-stubbing"><a href="#2-如何做一些测试打桩-stubbing" class="headerlink" title="(2). 如何做一些测试打桩(stubbing)"></a>(2). 如何做一些测试打桩(stubbing)</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 你可以mock具体的类型,不仅只是接口</span><span class="token class-name">LinkedList</span> mockedList <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 测试桩</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出“first”</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抛出异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 因为get(999) 没有打桩，因此输出null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证get(0)被调用的次数</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>默认情况下，所有的函数都有返回值。mock 函数默认返回的是 null，一个空的集合或者一个被对象类型包装的内置类型，例如 0、false 对应的对象类型为 Integer、Boolean；</li><li>测试桩函数可以被覆写: 例如常见的测试桩函数可以用于初始化夹具，但是测试函数能够覆写它。请注意，覆写测试桩函数是一种可能存在潜在问题的做法；</li><li>一旦测试桩函数被调用，该函数将会一致返回固定的值；</li><li>上一次调用测试桩函数有时候极为重要，当你调用一个函数很多次时，最后一次调用可能是你所感兴趣的。</li></ul><h4 id="3-参数匹配器-matchers"><a href="#3-参数匹配器-matchers" class="headerlink" title="(3). 参数匹配器(matchers)"></a>(3). 参数匹配器(matchers)</h4><p>Mockito 以自然的 java 风格来验证参数值: 使用 equals()函数。有时，当需要额外的灵活性时你可能需要使用参数匹配器，也就是 argument matchers:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用内置的anyInt()参数匹配器</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用自定义的参数匹配器( 在isValid()函数中返回你自己的匹配器实现 )</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出element</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你也可以验证参数匹配器</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数匹配器使验证和测试桩变得更灵活。点击<a href="https://static.javadoc.io/org.mockito/mockito-core/2.18.3/org/mockito/Matchers.html">这里</a>可以查看更多内置的匹配器以及自定义参数匹配器或者 hamcrest 匹配器的示例。</p><h4 id="4-验证函数的确切、最少、从未调用次数"><a href="#4-验证函数的确切、最少、从未调用次数" class="headerlink" title="(4). 验证函数的确切、最少、从未调用次数"></a>(4). 验证函数的确切、最少、从未调用次数</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用模拟对象</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"twice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"twice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下面的两个验证函数效果一样,因为verify默认验证的就是times(1)</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证具体的执行次数</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"twice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用never()进行验证,never相当于times(0)</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"never happened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用atLeast()/atMost()</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atLeastOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atLeast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"five times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atMost</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>verify 函数默认验证的是执行了 times(1)，也就是某个测试函数是否执行了 1 次.因此，times(1)通常被省略了。</p><h4 id="5-为返回值为-void-的函数通过-Stub-抛出异常"><a href="#5-为返回值为-void-的函数通过-Stub-抛出异常" class="headerlink" title="(5). 为返回值为 void 的函数通过 Stub 抛出异常"></a>(5). 为返回值为 void 的函数通过 Stub 抛出异常</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用这句代码会抛出异常</span>mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当你调用 doThrow(),doAnswer(),doNothing(),doReturn()anddoCallRealMethod()这些函数时可以在适当的位置调用 when()函数. 当你需要下面这些功能时这是必须的:</p><ul><li>测试 void 函数</li><li>在受监控的对象上测试函数</li><li>不知一次的测试为同一个函数，在测试过程中改变 mock 对象的行为。</li></ul><p>但是在调用 when()函数时你可以选择是否调用这些上述这些函数。</p><h4 id="6-验证执行执行顺序"><a href="#6-验证执行执行顺序" class="headerlink" title="(6). 验证执行执行顺序"></a>(6). 验证执行执行顺序</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// A. 验证mock一个对象的函数执行顺序</span><span class="token comment">// 创建Mock对象</span><span class="token class-name">List</span> singleMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用mock对象</span>singleMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为该mock对象创建一个inOrder对象</span><span class="token class-name">InOrder</span> inOrder <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 确保add函数首先执行的是add("was added first"),然后才是add("was added second")</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// B .验证多个mock对象的函数执行顺序</span><span class="token class-name">List</span> firstMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> secondMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用mock对象</span>firstMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>secondMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为这两个Mock对象创建inOrder对象</span><span class="token class-name">InOrder</span> inOrder <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>firstMock<span class="token punctuation">,</span> secondMock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证它们的执行顺序</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>firstMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>secondMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>验证执行顺序是非常灵活的。你不需要一个一个的验证所有交互,只需要验证你感兴趣的对象即可。另外，你可以仅通过那些需要验证顺序的 mock 对象来创建 InOrder 对象。</p><h4 id="7-确保交互-interaction-操作不会执行在-mock-对象上"><a href="#7-确保交互-interaction-操作不会执行在-mock-对象上" class="headerlink" title="(7). 确保交互(interaction)操作不会执行在 mock 对象上"></a>(7). 确保交互(interaction)操作不会执行在 mock 对象上</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用Mock对象</span>mockOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 普通验证</span><span class="token function">verify</span><span class="token punctuation">(</span>mockOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证某个交互是否从未被执行</span><span class="token function">verify</span><span class="token punctuation">(</span>mockOne<span class="token punctuation">,</span> <span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证mock对象没有交互过</span><span class="token function">verifyZeroInteractions</span><span class="token punctuation">(</span>mockTwo<span class="token punctuation">,</span> mockThree<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="8-查找冗余的调用"><a href="#8-查找冗余的调用" class="headerlink" title="(8). 查找冗余的调用"></a>(8). 查找冗余的调用</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用mock对象</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下面的验证将会失败</span><span class="token function">verifyNoMoreInteractions</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一些用户可能会在频繁地使用 verifyNoMoreInteractions()，甚至在每个测试函数中都用。但是 verifyNoMoreInteractions()并不建议在每个测试函数中都使用。verifyNoMoreInteractions()在交互测试套件中只是一个便利的验证，它的作用是当你需要验证是否存在冗余调用时。滥用它将导致测试代码的可维护性降低。你可以阅读这篇文档来了解更多相关信息。</p><h4 id="9-简化-mock-对象的创建"><a href="#9-简化-mock-对象的创建" class="headerlink" title="(9). 简化 mock 对象的创建"></a>(9). 简化 mock 对象的创建</h4><ul><li>最小化重复的创建代码;</li><li>使测试类的代码可读性更高;</li><li>使验证错误更易于阅读，因为字段名可用于标识 mock 对象;</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleManagerTest</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Mock</span> <span class="token keyword">private</span> <span class="token class-name">ArticleCalculator</span> calculator<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Mock</span> <span class="token keyword">private</span> <span class="token class-name">ArticleDatabase</span> database<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Mock</span> <span class="token keyword">private</span> <span class="token class-name">UserProvider</span> userProvider<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">ArticleManager</span> manager<span class="token punctuation">;</span></code></pre><p>注意！下面这句代码需要在运行测试函数之前被调用,一般放到测试类的基类或者 test runner 中:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">MockitoAnnotations</span><span class="token punctuation">.</span><span class="token function">initMocks</span><span class="token punctuation">(</span>testClass<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关于 mock 注解的更多信息可以阅读<a href="https://static.javadoc.io/org.mockito/mockito-core/2.18.3/org/mockito/MockitoAnnotations.html">MockitoAnnotations 文档</a>。</p><h4 id="10-为连续的调用做测试打桩-stub"><a href="#10-为连续的调用做测试打桩-stub" class="headerlink" title="(10). 为连续的调用做测试打桩 (stub)"></a>(10). 为连续的调用做测试打桩 (stub)</h4><p>有时我们需要为同一个函数调用的不同的返回值或异常做测试桩。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一次调用 : 抛出运行时异常</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二次调用 : 输出"foo"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 后续调用 : 也是输出"foo"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另外，连续调用的另一种更简短的版本 :</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 第一次调用时返回"one",第二次返回"two",第三次返回"three"</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="11-为回调做测试桩"><a href="#11-为回调做测试桩" class="headerlink" title="(11). 为回调做测试桩"></a>(11). 为回调做测试桩</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Object</span> <span class="token function">answer</span><span class="token punctuation">(</span><span class="token class-name">InvocationOnMock</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Object</span> mock <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"called with arguments: "</span> <span class="token operator">+</span> args<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 : "called with arguments: foo"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="12-监控真实对象"><a href="#12-监控真实对象" class="headerlink" title="(12). 监控真实对象"></a>(12). 监控真实对象</h4><p>你可以为真实对象创建一个监控(spy)对象。当你使用这个 spy 对象时真实的对象也会也调用，除非它的函数被 stub 了。<strong>尽量少使用 spy 对象</strong>，使用时也需要小心形式，例如 spy 对象可以用来处理遗留代码。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> spy <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你可以为某些函数打桩</span><span class="token function">when</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过spy对象调用真实对象的函数</span>spy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>spy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出第一个元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 因为size()函数被打桩了,因此这里返回的是100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 交互验证</span><span class="token function">verify</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Mockito 并不会为真实对象代理函数调用，实际上它会拷贝真实对象。因此如果你保留了真实对象并且与之交互，不要期望从监控对象得到正确的结果。当你在监控对象上调用一个没有被 stub 的函数时并不会调用真实对象的对应函数，你不会在真实对象上看到任何效果。<br>因此结论就是: 当你在监控一个真实对象时，你想在 stub 这个真实对象的函数，那么就是在自找麻烦。或者你根本不应该验证这些函数。</p><h4 id="13-重置-mocks-对象"><a href="#13-重置-mocks-对象" class="headerlink" title="(13). 重置 mocks 对象"></a>(13). 重置 mocks 对象</h4><p>聪明的 Mockito 使用者很少会用到这个特性，因为他们知道这是出现糟糕测试单元的信号。通常情况下你不会需要重设你的测试单元，只需要为每一个测试方法重新创建一个测试单元就可以了。<br>如果你真的想通过 reset()方法满足某些需求的话，请考虑实现简单，小而且专注于测试方法而不是冗长，精确的测试。首先可能出现的代码异味就是测试方法中间那的 reset()方法。这可能意味着你已经过度测试了。<br>添加 reset() 方法的唯一原因就是让它能与容器注入的测试单元协作。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> mock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reset</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//at this point the mock forgot any interactions &amp; stubbing</span></code></pre><h4 id="14-更多的注解"><a href="#14-更多的注解" class="headerlink" title="(14). 更多的注解"></a>(14). 更多的注解</h4><ul><li>@Captor: 创建 ArgumentCaptor。</li><li>@Spy: 可以代替 spy(Object)。</li><li>@InjectMocks: 如果此注解声明的变量需要用到 mock 对象，mockito 会自动注入 mock 或 spy 成员。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//可以这样写</span><span class="token annotation punctuation">@Spy</span><span class="token class-name">BeerDrinker</span> drinker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeerDrinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也可以这样写，mockito会自动实例化drinker.</span><span class="token annotation punctuation">@Spy</span><span class="token class-name">BeerDrinker</span> drinker<span class="token punctuation">;</span><span class="token comment">//会自动实例化LocalPub</span><span class="token annotation punctuation">@InjectMocks</span><span class="token class-name">LocalPub</span> pub<span class="token punctuation">;</span></code></pre><h4 id="15-BDD-风格的验证-Since-1-10-0"><a href="#15-BDD-风格的验证-Since-1-10-0" class="headerlink" title="(15). BDD 风格的验证(Since 1.10.0)"></a>(15). BDD 风格的验证(Since 1.10.0)</h4><p>开启 Behavior Driven Development(BDD，即行为驱动开发)风格的验证可以通过 BBD 的关键词 then 开始验证。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">given</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// when</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ride</span><span class="token punctuation">(</span>bike<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上就是 Mockito 的主要使用方式，关于更详细的介绍可参考<a href="https://static.javadoc.io/org.mockito/mockito-core/2.18.3/org/mockito/Mockito.html">Mockito 官方文档</a>和<a href="https://github.com/hehonghui/mockito-doc-zh">Mockito 中文文档</a>。</p><h3 id="4-Spring-Test"><a href="#4-Spring-Test" class="headerlink" title="4. Spring Test"></a>4. Spring Test</h3><p>目前几乎大多数 Java web 项目都是有基于 Spring 来开发的。通过 Spring 进行 bean 管理后，仅仅通过 JUnit 来做测试会有各种麻烦，比如：Spring 容器初始化问题、使用硬编码方式手工获取 Bean、不方便对数据操作的正确性做检查等。这时我们就可以通过 Spring 全家桶中的另一位成员<strong>spring-test</strong>来帮助我们在 Spring 工程中做单元测试了。以下通过简单的示例来演示其使用。</p><h4 id="1-加入依赖包"><a href="#1-加入依赖包" class="headerlink" title="(1). 加入依赖包"></a>(1). 加入依赖包</h4><p>通过 Maven 加入 JUnit、spring-test 的 Jar 包(最好其他 Spring 包版本一致)。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h4 id="2-创建测试类"><a href="#2-创建测试类" class="headerlink" title="(2). 创建测试类"></a>(2). 创建测试类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"/application-context-test.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 自动注入baseDao,默认按名称. */</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">IBaseDao</span> baseDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Rollback</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(c_name, c_password) values(?, ?)"</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        baseDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sql <span class="token punctuation">,</span> objs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">"SELECT * FROM t_user WHERE c_name = ? and c_password = ?"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> baseDao<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql1<span class="token punctuation">,</span> objs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>使用 Spring Test 可以使用@Autowired 自动注入相关的 bean 信息，而不需要自己手动通过 getBean 去获取相应的 bean 信息。</li><li>使用 Spring Test 测试，可以@Transaction 注解，表示该方法使用 spring 的事务，在单元测试中，执行完毕后默认会回滚。</li><li>使用@Rollback 注解，标明使用完此方法后事务回滚，可以@Rollback(false)这个注解来使对数据库操作的测试结果不回滚。</li></ul><h4 id="3-对-Spring-MVC-的测试"><a href="#3-对-Spring-MVC-的测试" class="headerlink" title="(3). 对 Spring MVC 的测试"></a>(3). 对 Spring MVC 的测试</h4><p>为了测试 web 项目，需要一些 Servlet 相关的模拟对象，比如：MockMVC/MockHttpServletRequest/MockHttpServletResponse/MockHttpSession。使用示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>forwardedUrl<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>view<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">MockHttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">MockHttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebAppConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>setup<span class="token punctuation">.</span></span><span class="token class-name">MockMvcBuilders</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"/application-context-test.xml"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebAppConfiguration</span><span class="token punctuation">(</span><span class="token string">"src/main/resources"</span><span class="token punctuation">)</span> <span class="token comment">// 此注解指定web资源的位置，默认为src/main/webapp</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestControllerIntegrationTests</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span> <span class="token comment">// 模拟MVC对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span><span class="token comment">// 在测试用例注入spring的bean</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">WebApplicationContext</span> wac<span class="token punctuation">;</span> <span class="token comment">// 注入WebApplicationContext</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">MockHttpSession</span> session<span class="token punctuation">;</span> <span class="token comment">// 注入模拟的http session</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">MockHttpServletRequest</span> request<span class="token punctuation">;</span> <span class="token comment">// 模拟request</span>    <span class="token annotation punctuation">@Before</span> <span class="token comment">// 测试开始前的初始化工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wac<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNormalController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> exp_str <span class="token operator">=</span> demoService<span class="token punctuation">.</span><span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// expect str</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 模拟GET /normal</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 预期返回状态为200</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 预期view的名称</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">forwardedUrl</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/views/page.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 预期页面转向的真正路径</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> exp_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 预期model里的值</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRestController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/testRest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// HTTP GET 方法</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">"text/plain;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//14</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注</strong>:demoService 及相关方法的调用，也可以通过 Mockito 工具 Mock 出来，更符合单元测试对<strong>单元性</strong>的要求，否则这些测试又额外附带了一定集成测试的性质了。</p><h3 id="4-spring-boot-starter-test"><a href="#4-spring-boot-starter-test" class="headerlink" title="4. spring-boot-starter-test"></a>4. spring-boot-starter-test</h3><h4 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="(1). 简单介绍"></a>(1). 简单介绍</h4><p>现在越来越多的应用都采用 SpringBoot 的方式来构建，在 SpringBoot 应用中单元测试变得更加容易了，只需要加入 spring-boot-starter-test 的 Starter 即可，其中默认导入了 Spring Boot 测试模块以及 JUnit，AssertJ，Hamcrest 和其他一些有用的库。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>spring-boot-starter-test 的 Starter (Scope 为 test)，包括了以下提供的类库：</p><ul><li><a href="https://junit.org/">JUnit</a>：单元测试 Java 应用程序的事实标准。</li><li><a href="https://docs.spring.io/spring/docs/5.0.6.RELEASE/spring-framework-reference/testing.html#integration-testing">Spring Test</a>和 Spring Boot Test：Spring Boot 应用程序的实用程序和集成测试支持。</li><li><a href="https://joel-costigliola.github.io/assertj/">AssertJ</a>：流畅的断言库。</li><li><a href="http://hamcrest.org/JavaHamcrest/">Hamcrest</a>：匹配器对象库。</li><li><a href="http://mockito.org/">Mockito</a>：Java Mock 框架。</li><li><a href="https://github.com/skyscreamer/JSONassert">JSONassert</a>：JSON 的断言库。</li><li><a href="http://blinkfox.com/2018/11/15/hou-duan/java/dan-yuan-ce-shi-zhi-nan/JsonPath">JsonPath</a>：JSON 的 XPath。</li></ul><p>我们通常在编写测试时发现这些通用库都是比较有用的。如果这些库还不适合您的需求，您还可以添加您自己的附加测试依赖库。<br>Spring Boot 提供了一个@SpringBootTest 注释，当您需要 Spring Boot 功能时，它可以用作标准 spring-test@ContextConfiguration 注释的替代方法。注解的工作原理是通过 SpringApplication 创建用于测试的 ApplicationContext。除了@SpringBootTest 之外，还提供了许多其他注释来测试应用程序的更具体的切片。<br><strong>提示</strong>：不要忘记在测试中添加@RunWith(SpringRunner.class)，否则注释将被忽略。</p><h4 id="2-一个简单示例"><a href="#2-一个简单示例" class="headerlink" title="(2). 一个简单示例"></a>(2). 一个简单示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;msg&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">selectByKey</span><span class="token punctuation">(</span><span class="token number">20180302325L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"Blinkfox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的配置信息为:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面就是最简单的单元测试写法，测试类上只需要@RunWith(SpringRunner.class)和@SpringBootTest 两个注解即可测试任何类和方法。</p><h4 id="3-web-模块的单元测试"><a href="#3-web-模块的单元测试" class="headerlink" title="(3). web 模块的单元测试"></a>(3). web 模块的单元测试</h4><p>要测试 Spring MVC 控制器是否按预期工作，请使用@WebMvcTest 注释。@WebMvcTest 自动配置 Spring MVC 基础结构，并将扫描的 bean 限制为@Controller，@ControllerAdvice，@JsonComponent，Converter，GenericConverter，Filter，WebMvcConfigurer 和 HandlerMethodArgumentResolver。 使用此注释时，不会扫描常规的@Componentbean。<br>您还可以使用@AutoConfigureMockMvc 对其进行注释，从而在非@WebMvcTest（如@SpringBootTest）中自动配置 MockMvc。 以下示例使用 MockMvc：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">UserVehicleController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyControllerTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MockBean</span>    <span class="token keyword">private</span> <span class="token class-name">UserVehicleService</span> userVehicleService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token function">given</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userVehicleService<span class="token punctuation">.</span><span class="token function">getVehicleDetails</span><span class="token punctuation">(</span><span class="token string">"sboot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VehicleDetails</span><span class="token punctuation">(</span><span class="token string">"Honda"</span><span class="token punctuation">,</span> <span class="token string">"Civic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/sboot/vehicle"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Honda Civic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>SpringBoot 对各种单元测试的场景支持的比较全，更多的示例可直接在<a href="https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#boot-features-testing">Spiring Boot Test 官方指南</a>中去查看，这里就不再一一列举了。</p><h3 id="5-JaCoCo"><a href="#5-JaCoCo" class="headerlink" title="5. JaCoCo"></a>5. JaCoCo</h3><p>在做单元测试时，代码覆盖率常常被拿来作为衡量测试好坏的指标，甚至，用代码覆盖率来考核测试任务完成情况，比如，代码覆盖率必须达到 80％或 90％。目前 Java 常用覆盖率工具<a href="https://www.atlassian.com/software/clover">clover</a>、<a href="http://www.eclemma.org/jacoco/">Jacoco</a>和<a href="https://cobertura.github.io/cobertura/">Cobertura</a>等。关于这些代码覆盖率工具的对比可参看<a href="https://confluence.atlassian.com/clover/comparison-of-code-coverage-tools-681706101.html?_ga=2.7075890.1253300005.1526228675-143716968.1468426926">这里</a>。这里我们就选取 Jacoco 来作为代码覆盖率工具来做介绍。<br>Jacoco 是一个开源的覆盖率工具。Jacoco 可以嵌入到 Ant 、Maven 中，并提供了 Eclipse、IDEA 插件,也可以使用 Java Agent 技术监控 Java 程序。很多第三方的工具提供了对 Jacoco 的集成，如 sonar、Jenkins。<br>Jacoco 与 Maven 的集成很简单，只需要在 plugins 中添加如下插件即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>jacoco<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>jacoco<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">0.7</span><span class="token number">.7</span><span class="token number">.201606060606</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>destFile<span class="token punctuation">></span></span>target<span class="token operator">/</span>coverage<span class="token operator">-</span>reports<span class="token operator">/</span>jacoco<span class="token operator">-</span>unit<span class="token punctuation">.</span>exec<span class="token operator">&lt;</span><span class="token operator">/</span>destFile<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dataFile<span class="token punctuation">></span></span>target<span class="token operator">/</span>coverage<span class="token operator">-</span>reports<span class="token operator">/</span>jacoco<span class="token operator">-</span>unit<span class="token punctuation">.</span>exec<span class="token operator">&lt;</span><span class="token operator">/</span>dataFile<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>executions<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>execution<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">></span></span>jacoco<span class="token operator">-</span>initialize<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>goals<span class="token punctuation">></span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>goal<span class="token punctuation">></span></span>prepare<span class="token operator">-</span>agent<span class="token operator">&lt;</span><span class="token operator">/</span>goal<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>goals<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>execution<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>execution<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">></span></span>jacoco<span class="token operator">-</span>site<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>phase<span class="token punctuation">></span></span><span class="token keyword">package</span><span class="token operator">&lt;</span><span class="token operator">/</span>phase<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>goals<span class="token punctuation">></span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>goal<span class="token punctuation">></span></span>report<span class="token operator">&lt;</span><span class="token operator">/</span>goal<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>goals<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>execution<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>executions<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span></code></pre><p>做单元测试时，测试覆盖率是不是越高代表代码质量越好呢？Martin Fowler（重构那本书的作者）曾经写过一篇博客来讨论这个问题，他指出：<strong>把测试覆盖作为质量目标没有任何意义，而我们应该把它作为一种发现未被测试覆盖的代码的手段</strong>。<br>所以，代码覆盖率统计是用来发现没有被测试覆盖的代码；代码覆盖率统计不能完全用来衡量代码质量。</p><hr><p>参考资料</p><ul><li><a href="https://blog.csdn.net/vincetest/article/details/1378507">单元测试大揭密</a></li><li><a href="https://www.yiibai.com/junit/">JUnit 教程</a></li><li><a href="http://sjyuan.cc/junit5/user-guide-cn/">JUnit5 用户指南中文版</a></li><li><a href="https://blog.csdn.net/bboyfeiyu/article/details/52127551">Mockito 中文文档</a></li><li><a href="https://github.com/yangyubo/zh-unit-testing-guidelines/blob/master/readme.rst">单元测试准则</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEMO</title>
      <link href="2017/12/13/yuque/DEMO/"/>
      <url>2017/12/13/yuque/DEMO/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/131683/1618478553167-dcb6c430-0bca-48e3-a79a-5a44244cc36b.jpeg#height=215&id=fBaDt&margin=%5Bobject%20Object%5D&name=15.jpg&originHeight=860&originWidth=860&originalType=binary&size=80189&status=done&style=none&width=215" alt="15.jpg"></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Blog CI/CD<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> repository_dispatch<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">blog-cicd</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo blog build &amp; deploy    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout codes      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup node      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'12.x'</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache node modules      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> ~/.npm        <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> runner.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>node<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> hashFiles('<span class="token important">**/package-lock.json')</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        npm install hexo-cli -g        npm install yuque-hexo -g        npm install        yuque-hexo sync</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate files      <span class="token key atrule">run</span><span class="token punctuation">:</span> hexo generate    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy blog    <span class="token key atrule">evn</span><span class="token punctuation">:</span>      <span class="token key atrule">Github_Pages</span><span class="token punctuation">:</span> github.com/sbwit/sbwit.github.io        <span class="token key atrule">Github_Token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.TOKEN_GITHUBAPI <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone "https://$&#123;Github_Pages&#125;" deploy_git        mv ./deploy_git/.git ./public/        cd ./public        git config user.name "sbwit"        git config user.email "17740857130@qq.com"        git add .        git commit -m "GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"        git push --force --quiet "https://$&#123;Github_Token&#125;@$&#123;Github_Pages&#125;" master:master</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># -*- coding: utf8 -*-</span>import requestsdef main_handler(event<span class="token punctuation">,</span> <span class="token key atrule">context)</span><span class="token punctuation">:</span>r = requests.post("https<span class="token punctuation">:</span>//api.github.com/repos/sbwit/sbwit.hexo/dispatches"<span class="token punctuation">,</span>json = <span class="token punctuation">&#123;</span><span class="token key atrule">"event_type"</span><span class="token punctuation">:</span> <span class="token string">"start"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>headers = <span class="token punctuation">&#123;</span>"User<span class="token punctuation">-</span>Agent"<span class="token punctuation">:</span><span class="token string">'curl/7.52.1'</span><span class="token punctuation">,</span><span class="token key atrule">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span><span class="token key atrule">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.everest-preview+json'</span><span class="token punctuation">,</span><span class="token key atrule">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'token GITHUB_TOKEN(自己的)'</span><span class="token punctuation">&#125;</span>)<span class="token key atrule">if r.status_code == 204</span><span class="token punctuation">:</span>return "This's OK<span class="token tag">!</span>"<span class="token key atrule">else</span><span class="token punctuation">:</span>return r.status_code</code></pre><p>官方的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Hexo<span class="token comment"># master branch on push, auto run</span><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Deploy-Pages</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo Public To Pages    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token comment"># check it to your workflow can access it</span>      <span class="token comment"># from: https://github.com/actions/checkout</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master      <span class="token comment"># from: https://github.com/actions/setup-node</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 10.x        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.14"</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git config --global user.name 'sbwit'           git config --global user.email '17740857130@163.com'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get Latest Commit Message        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git log --pretty=format:"%s from Github Actions at `date +"%Y-%m-%d %H:%M:%S"`" --date=short -n 1 > commit-message.log</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Hexo Dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install hexo-cli -g           npm install</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate public files        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo clean hexo generate</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy To Github Pages        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">Github_Pages</span><span class="token punctuation">:</span> github.com/sbwit/sbwit.github.io          <span class="token key atrule">Github_Token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.TOKEN_GITHUBAPI <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git clone https://$&#123;Github_Pages&#125; .github_pages           cd .github_pages           git checkout master           cd ../           mv .github_pages/.git/ ./public/           cd ./public/           git add .           git commit -F ../commit-message.log           git push --force --quiet "https://$&#123;Github_Token&#125;@$&#123;Github_Pages&#125;" master:master</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
